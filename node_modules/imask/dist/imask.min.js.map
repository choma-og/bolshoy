{"version":3,"file":"imask.min.js","sources":["../src/core/utils.ts","../src/core/action-details.ts","../src/core/holder.ts","../src/masked/factory.ts","../src/controls/mask-element.ts","../src/controls/html-mask-element.ts","../src/controls/html-input-mask-element.ts","../src/controls/html-contenteditable-mask-element.ts","../src/controls/input.ts","../src/core/change-details.ts","../src/core/continuous-tail-details.ts","../src/masked/base.ts","../src/masked/pattern/chunk-tail-details.ts","../src/masked/pattern/cursor.ts","../src/masked/pattern/fixed-definition.ts","../src/masked/pattern/input-definition.ts","../src/masked/regexp.ts","../src/masked/pattern.ts","../src/masked/range.ts","../src/masked/date.ts","../src/masked/dynamic.ts","../src/masked/enum.ts","../src/masked/function.ts","../src/masked/number.ts","../src/masked/pipe.ts","../src/index.ts"],"sourcesContent":["/** Checks if value is string */\nexport\nfunction isString (str: unknown): str is string {\n  return typeof str === 'string' || str instanceof String;\n}\n\n/** Checks if value is object */\nexport\nfunction isObject (obj: unknown): obj is object {\n  return typeof obj === 'object' && obj != null && obj?.constructor?.name === 'Object';\n}\n\nexport\nfunction pick<T extends Record<string, any>, K extends keyof T, V extends T[keyof T]> (\n  obj: T,\n  keys: K[] | ((v: V, k: K) => boolean),\n): Pick<T, K> {\n  if (Array.isArray(keys)) return pick(obj, (_, k) => keys.includes(k));\n  return (Object.entries(obj) as unknown as Array<[K, V]>)\n    .reduce((acc, [k, v]) => {\n      if (keys(v, k)) acc[k] = v;\n      return acc;\n    }, {} as any);\n}\n\n/** Direction */\nexport\nconst DIRECTION = {\n  NONE: 'NONE',\n  LEFT: 'LEFT',\n  FORCE_LEFT: 'FORCE_LEFT',\n  RIGHT: 'RIGHT',\n  FORCE_RIGHT: 'FORCE_RIGHT',\n} as const;\n\n/** Direction */\nexport\ntype Direction = typeof DIRECTION[keyof typeof DIRECTION];\n\nexport\nfunction forceDirection (direction: Direction): Direction {\n  switch (direction) {\n    case DIRECTION.LEFT:\n      return DIRECTION.FORCE_LEFT;\n    case DIRECTION.RIGHT:\n      return DIRECTION.FORCE_RIGHT;\n    default:\n      return direction;\n  }\n}\n\n/** Escapes regular expression control chars */\nexport\nfunction escapeRegExp (str: string): string {\n  return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\n}\n\n// cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\nexport\nfunction objectIncludes (b: any, a: any): boolean {\n  if (a === b) return true;\n\n  const arrA = Array.isArray(a), arrB = Array.isArray(b);\n  let i;\n\n  if (arrA && arrB) {\n    if (a.length != b.length) return false;\n    for (i = 0; i < a.length; i++)\n      if (!objectIncludes(a[i], b[i])) return false;\n    return true;\n  }\n\n  if (arrA != arrB) return false;\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    const dateA = a instanceof Date, dateB = b instanceof Date;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n    if (dateA != dateB) return false;\n\n    const regexpA = a instanceof RegExp, regexpB = b instanceof RegExp;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n    if (regexpA != regexpB) return false;\n\n    const keys = Object.keys(a);\n    // if (keys.length !== Object.keys(b).length) return false;\n\n    for (i = 0; i < keys.length; i++)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = 0; i < keys.length; i++)\n      if(!objectIncludes(b[keys[i]], a[keys[i]])) return false;\n\n    return true;\n  } else if (a && b && typeof a === 'function' && typeof b === 'function') {\n      return a.toString() === b.toString()\n  }\n\n  return false;\n}\n\n/** Selection range */\nexport\ntype Selection = {\n  start: number;\n  end: number;\n};\n","import { type Direction, type Selection, DIRECTION } from './utils';\n\nexport\ntype ActionDetailsOptions = Pick<ActionDetails,\n  | 'value'\n  | 'cursorPos'\n  | 'oldValue'\n  | 'oldSelection'\n>;\n\n\n/** Provides details of changing input */\nexport default\nclass ActionDetails {\n  /** Current input value */\n  declare value: string;\n  /** Current cursor position */\n  declare cursorPos: number;\n  /** Old input value */\n  declare oldValue: string;\n  /** Old selection */\n  declare oldSelection: Selection;\n\n  constructor (opts: ActionDetailsOptions) {\n    Object.assign(this, opts);\n\n    // double check if left part was changed (autofilling, other non-standard input triggers)\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n\n  /** Start changing position */\n  get startChangePos (): number {\n    return Math.min(this.cursorPos, this.oldSelection.start);\n  }\n\n  /** Inserted symbols count */\n  get insertedCount (): number {\n    return this.cursorPos - this.startChangePos;\n  }\n\n  /** Inserted symbols */\n  get inserted (): string {\n    return this.value.substr(this.startChangePos, this.insertedCount);\n  }\n\n  /** Removed symbols count */\n  get removedCount (): number {\n    // Math.max for opposite operation\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\n      // for Delete\n      this.oldValue.length - this.value.length, 0);\n  }\n\n  /** Removed symbols */\n  get removed (): string {\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\n  }\n\n  /** Unchanged head symbols */\n  get head (): string {\n    return this.value.substring(0, this.startChangePos);\n  }\n\n  /** Unchanged tail symbols */\n  get tail (): string {\n    return this.value.substring(this.startChangePos + this.insertedCount);\n  }\n\n  /** Remove direction */\n  get removeDirection (): Direction {\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\n\n    // align right if delete at right\n    return (\n      (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&\n      // if not range removed (event with backspace)\n      this.oldSelection.end === this.oldSelection.start\n    ) ?\n      DIRECTION.RIGHT :\n      DIRECTION.LEFT;\n  }\n}\n","import type { default as _InputMask, InputMaskElement as _InputMaskElement } from '../controls/input';\nimport type { default as _Masked } from '../masked/base';\nimport type { default as _MaskedPattern } from '../masked/pattern';\nimport type { default as _MaskedDate } from '../masked/date';\nimport type { default as _MaskedDynamic } from '../masked/dynamic';\nimport type { default as _MaskedEnum } from '../masked/enum';\nimport type { default as _MaskedRange } from '../masked/range';\nimport type { default as _MaskedNumber } from '../masked/number';\nimport type { default as _MaskedFunction } from '../masked/function';\nimport type { default as _MaskedRegExp } from '../masked/regexp';\nimport type {\n  default as _createMask,\n  FactoryArg,\n} from '../masked/factory';\nimport type { default as _ChangeDetails } from './change-details';\n\nimport type { default as _MaskElement } from '../controls/mask-element';\nimport type { default as _HTMLMaskElement } from '../controls/html-mask-element';\nimport type { default as _HTMLContenteditableMaskElement } from '../controls/html-contenteditable-mask-element';\nimport type {\n  createPipe as _createPipe,\n  pipe as _pipe,\n  PIPE_TYPE as _PIPE_TYPE\n} from '../masked/pipe';\n\n\n/** Applies mask on element */\nfunction IMask<Opts extends FactoryArg> (el: _InputMaskElement, opts: Opts): _InputMask<Opts> {\n  // currently available only for input-like elements\n  return new IMask.InputMask(el, opts);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\ndeclare namespace IMask {\n  export let InputMask: typeof _InputMask;\n  export let createMask: typeof _createMask;\n  export let Masked: typeof _Masked;\n  export let MaskedPattern: typeof _MaskedPattern;\n  export let MaskedDate: typeof _MaskedDate;\n  export let MaskedDynamic: typeof _MaskedDynamic;\n  export let MaskedEnum: typeof _MaskedEnum;\n  export let MaskedRange: typeof _MaskedRange;\n  export let MaskedNumber: typeof _MaskedNumber;\n  export let MaskedFunction: typeof _MaskedFunction;\n  export let MaskedRegExp: typeof _MaskedRegExp;\n  export let ChangeDetails: typeof _ChangeDetails;\n  export let MaskElement: typeof _MaskElement;\n  export let HTMLMaskElement: typeof _HTMLMaskElement;\n  export let HTMLContenteditableMaskElement: typeof _HTMLContenteditableMaskElement;\n  export let createPipe: typeof _createPipe;\n  export let pipe: typeof _pipe;\n  export let PIPE_TYPE: typeof _PIPE_TYPE;\n}\n\nexport default IMask;\n","import { isString, pick, isObject } from '../core/utils';\nimport type Masked from './base';\nimport { type MaskedOptions } from './base';\nimport IMask from '../core/holder';\n\nimport type MaskedRegExp from './regexp';\nimport type MaskedPattern from './pattern';\nimport type MaskedFunction from './function';\nimport type MaskedDate from './date';\nimport type MaskedNumber from './number';\nimport type MaskedDynamic from './dynamic';\nimport type MaskedRange from './range';\nimport type MaskedEnum from './enum';\n\nimport { type MaskedEnumOptions } from './enum';\nimport { type MaskedRangeOptions } from './range';\nimport { type MaskedDynamicOptions } from './dynamic';\nimport { type MaskedPatternOptions } from './pattern';\nimport { type MaskedNumberOptions } from './number';\nimport { type MaskedRegExpOptions } from './regexp';\nimport { type MaskedFunctionOptions } from './function';\nimport { type MaskedDateOptions } from './date';\n\ntype MaskedDateFactoryOptions = Omit<MaskedDateOptions, 'mask'> & { mask: DateConstructor };\n\nexport\ntype FactoryStaticOpts =\n  | MaskedDateFactoryOptions\n  | MaskedNumberOptions\n  | MaskedPatternOptions\n  | MaskedDynamicOptions\n  | MaskedRegExpOptions\n  | MaskedFunctionOptions\n;\n\nexport\ntype AllFactoryStaticOpts =\n  & MaskedDateFactoryOptions\n  & MaskedNumberOptions\n  & MaskedPatternOptions\n  & MaskedDynamicOptions\n  & MaskedRegExpOptions\n  & MaskedFunctionOptions\n  & MaskedEnumOptions\n  & MaskedRangeOptions\n;\n\nexport\ntype FactoryStaticReturnMasked<Opts extends FactoryStaticOpts> =\n  Opts extends MaskedDateFactoryOptions ? MaskedDate :\n  Opts extends MaskedNumberOptions ? MaskedNumber :\n  Opts extends MaskedPatternOptions ? MaskedPattern :\n  Opts extends MaskedDynamicOptions ? MaskedDynamic :\n  Opts extends MaskedRegExpOptions ? MaskedRegExp :\n  Opts extends MaskedFunctionOptions ? MaskedFunction :\n  never\n;\n\nexport\ntype FactoryStaticMaskReturnMasked<Mask extends FactoryStaticOpts['mask']> =\n  Mask extends MaskedDateFactoryOptions['mask'] ? MaskedDate :\n  Mask extends MaskedNumberOptions['mask'] ? MaskedNumber :\n  Mask extends MaskedPatternOptions['mask'] ? MaskedPattern :\n  Mask extends MaskedDynamicOptions['mask'] ? MaskedDynamic :\n  Mask extends MaskedRegExpOptions['mask'] ? MaskedRegExp :\n  Mask extends MaskedFunctionOptions['mask'] ? MaskedFunction :\n  never\n;\n\n\nexport\ntype FactoryInstanceOpts = MaskedOptions & { mask: Masked };\n\nexport\ntype FactoryInstanceReturnMasked<Opts extends FactoryInstanceOpts> = Opts extends { mask: infer M } ? M : never;\n\nexport\ntype FactoryConstructorOpts = MaskedOptions & { mask:\n  | typeof Masked\n  | typeof MaskedDate\n  | typeof MaskedNumber\n  | typeof MaskedEnum\n  | typeof MaskedRange\n  | typeof MaskedRegExp\n  | typeof MaskedFunction\n  | typeof MaskedPattern\n  | typeof MaskedDynamic\n  | typeof MaskedRegExp\n};\n \nexport\ntype FactoryConstructorReturnMasked<Opts extends FactoryConstructorOpts> =\n  Opts extends { mask: typeof MaskedDate } ? MaskedDate :\n  Opts extends { mask: typeof MaskedNumber } ? MaskedNumber :\n  Opts extends { mask: typeof MaskedEnum } ? MaskedEnum :\n  Opts extends { mask: typeof MaskedRange } ? MaskedRange :\n  Opts extends { mask: typeof MaskedRegExp } ? MaskedRegExp :\n  Opts extends { mask: typeof MaskedFunction } ? MaskedFunction :\n  Opts extends { mask: typeof MaskedPattern } ? MaskedPattern :\n  Opts extends { mask: typeof MaskedDynamic } ? MaskedDynamic :\n  Masked\n;\n\nexport\ntype FactoryOpts = FactoryConstructorOpts | FactoryInstanceOpts | FactoryStaticOpts;\n\nexport\ntype FactoryArg = Masked | FactoryOpts | FactoryStaticOpts['mask'];\n\nexport\ntype ExtendFactoryArgOptions<Opts extends { [key: string]: any }> =\n  Masked | FactoryOpts & Opts | FactoryStaticOpts['mask']\n;\n\nexport\ntype UpdateStaticOpts<Opts extends FactoryStaticOpts> =\n  Opts extends MaskedEnumOptions ? MaskedEnumOptions :\n  Opts extends MaskedRangeOptions ? MaskedRangeOptions :\n  Opts extends MaskedDynamicOptions ? MaskedDynamicOptions :\n  Opts extends MaskedPatternOptions ? MaskedPatternOptions :\n  Opts extends MaskedDateOptions ? MaskedDateOptions :\n  Opts extends MaskedNumberOptions ? MaskedNumberOptions :\n  Opts extends MaskedRegExpOptions ? MaskedRegExpOptions :\n  Opts extends MaskedFunctionOptions ? MaskedFunctionOptions :\n  never\n;\n\ntype UpdateAnyOpts = Record<string, any>;\n\nexport\ntype UpdateInstanceOpts<M extends Masked> =\n  M extends MaskedRegExp ? MaskedRegExpOptions :\n  M extends MaskedFunction ? MaskedFunctionOptions :\n  M extends MaskedDate ? MaskedDateOptions :\n  M extends MaskedNumber ? MaskedNumberOptions :\n  M extends MaskedDynamic ? MaskedDynamicOptions :\n  M extends MaskedRange ? MaskedRangeOptions :\n  M extends MaskedEnum ? MaskedEnumOptions :\n  M extends MaskedPattern ? MaskedPatternOptions :\n  UpdateAnyOpts\n;\n\nexport\ntype UpdateConstructorOpts<M extends FactoryConstructorOpts> =\n  M extends { mask: typeof MaskedDate } ? MaskedDateOptions :\n  M extends { mask: typeof MaskedNumber } ? MaskedNumberOptions :\n  M extends { mask: typeof MaskedEnum } ? MaskedEnumOptions :\n  M extends { mask: typeof MaskedRange } ? MaskedRangeOptions :\n  M extends { mask: typeof MaskedRegExp } ? MaskedRegExpOptions :\n  M extends { mask: typeof MaskedFunction } ? MaskedFunctionOptions :\n  M extends { mask: typeof MaskedPattern } ? MaskedPatternOptions :\n  M extends { mask: typeof MaskedDynamic } ? MaskedDynamicOptions :\n  UpdateAnyOpts\n;\n\nexport\ntype UpdateStaticMaskOpts<M extends FactoryStaticOpts['mask']> =\n  M extends MaskedDateFactoryOptions['mask'] ? MaskedDateOptions :\n  M extends MaskedNumberOptions['mask'] ? MaskedNumberOptions :\n  M extends MaskedPatternOptions['mask'] ? MaskedPatternOptions :\n  M extends MaskedDynamicOptions['mask'] ? MaskedDynamicOptions :\n  M extends MaskedRegExpOptions['mask'] ? MaskedRegExpOptions :\n  M extends MaskedFunctionOptions['mask'] ? MaskedFunctionOptions :\n  never\n;\n\nexport\ntype UpdateOpts<Opts extends FactoryArg> = Partial<\n  Opts extends Masked ? UpdateInstanceOpts<Opts> :\n  Opts extends FactoryStaticOpts['mask'] ? UpdateStaticMaskOpts<Opts> :\n  Opts extends FactoryStaticOpts ? UpdateStaticOpts<Opts> :\n  Opts extends FactoryInstanceOpts ? UpdateInstanceOpts<Opts['mask']> :\n  Opts extends FactoryConstructorOpts ? UpdateConstructorOpts<Opts> :\n  UpdateAnyOpts\n>;\n\nexport\ntype FactoryReturnMasked<Opts extends FactoryArg> =\n  Opts extends Masked ? Opts :\n  Opts extends FactoryStaticOpts['mask'] ? FactoryStaticMaskReturnMasked<Opts> :\n  Opts extends FactoryConstructorOpts ? FactoryConstructorReturnMasked<Opts> :\n  Opts extends FactoryInstanceOpts ? FactoryInstanceReturnMasked<Opts> :\n  Opts extends FactoryStaticOpts ? FactoryStaticReturnMasked<Opts> :\n  never\n;\n\n\n\n// TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754\n// export function maskedClass(mask: string): typeof MaskedPattern;\n// export function maskedClass(mask: DateConstructor): typeof MaskedDate;\n// export function maskedClass(mask: NumberConstructor): typeof MaskedNumber;\n// export function maskedClass(mask: Array<any> | ArrayConstructor): typeof MaskedDynamic;\n// export function maskedClass(mask: MaskedDate): typeof MaskedDate;\n// export function maskedClass(mask: MaskedNumber): typeof MaskedNumber;\n// export function maskedClass(mask: MaskedEnum): typeof MaskedEnum;\n// export function maskedClass(mask: MaskedRange): typeof MaskedRange;\n// export function maskedClass(mask: MaskedRegExp): typeof MaskedRegExp;\n// export function maskedClass(mask: MaskedFunction): typeof MaskedFunction;\n// export function maskedClass(mask: MaskedPattern): typeof MaskedPattern;\n// export function maskedClass(mask: MaskedDynamic): typeof MaskedDynamic;\n// export function maskedClass(mask: Masked): typeof Masked;\n// export function maskedClass(mask: typeof Masked): typeof Masked;\n// export function maskedClass(mask: typeof MaskedDate): typeof MaskedDate;\n// export function maskedClass(mask: typeof MaskedNumber): typeof MaskedNumber;\n// export function maskedClass(mask: typeof MaskedEnum): typeof MaskedEnum;\n// export function maskedClass(mask: typeof MaskedRange): typeof MaskedRange;\n// export function maskedClass(mask: typeof MaskedRegExp): typeof MaskedRegExp;\n// export function maskedClass(mask: typeof MaskedFunction): typeof MaskedFunction;\n// export function maskedClass(mask: typeof MaskedPattern): typeof MaskedPattern;\n// export function maskedClass(mask: typeof MaskedDynamic): typeof MaskedDynamic;\n// export function maskedClass<Mask extends typeof Masked> (mask: Mask): Mask;\n// export function maskedClass(mask: RegExp): typeof MaskedRegExp;\n// export function maskedClass(mask: (value: string, ...args: any[]) => boolean): typeof MaskedFunction;\n\n/** Get Masked class by mask type */\nexport function maskedClass (mask: Masked | FactoryOpts['mask']): any /* TODO */ {\n  if (mask == null) throw new Error('mask property should be defined');\n\n  if (mask instanceof RegExp) return IMask.MaskedRegExp;\n  if (isString(mask)) return IMask.MaskedPattern;\n  if (mask === Date) return IMask.MaskedDate;\n  if (mask === Number) return IMask.MaskedNumber;\n  if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic;\n  if (IMask.Masked && (mask as any).prototype instanceof IMask.Masked) return mask;\n  if (IMask.Masked && mask instanceof IMask.Masked) return mask.constructor;\n  if (mask instanceof Function) return IMask.MaskedFunction;\n\n  console.warn('Mask not found for mask', mask);  // eslint-disable-line no-console\n  return IMask.Masked;\n}\n\ntype MaskedClassOf<M extends Masked> =\n  M extends MaskedDate ? typeof MaskedDate :\n  M extends MaskedNumber ? typeof MaskedNumber :\n  M extends MaskedEnum ? typeof MaskedEnum :\n  M extends MaskedRange ? typeof MaskedRange :\n  M extends MaskedRegExp ? typeof MaskedRegExp :\n  M extends MaskedFunction ? typeof MaskedFunction :\n  M extends MaskedPattern ? typeof MaskedPattern :\n  M extends MaskedDynamic ? typeof MaskedDynamic :\n  any\n;\n\n\ntype NormalizedMaskedOpts<Opts extends Masked> = Omit<Opts, 'mask'> & {\n  _mask: Opts,\n  mask: MaskedClassOf<Opts>,\n};\n\ntype NormalizedInstanceOpts<Opts extends FactoryInstanceOpts> =\n  Omit<Opts['mask'], `_${string}` | 'mask'> &\n  NormalizedMaskedOpts<Opts['mask']>\n;\n\nexport\ntype NormalizedOpts<Opts extends FactoryArg> =\n  Opts extends FactoryStaticOpts['mask'] ? { mask: Opts } :\n  Opts extends Masked ? NormalizedMaskedOpts<Opts> :\n  Opts extends FactoryInstanceOpts ? NormalizedInstanceOpts<Opts> :\n  Opts extends FactoryStaticOpts | FactoryConstructorOpts ? Opts :\n  { mask: Opts }\n;\n\nexport\nfunction normalizeOpts<Opts extends FactoryArg> (opts: Opts): NormalizedOpts<Opts> {\n  if (!opts) throw new Error('Options in not defined');\n\n  if (IMask.Masked) {\n    if ((opts as any).prototype instanceof IMask.Masked) return { mask: opts } as NormalizedOpts<Opts>;\n\n    /*\n      handle cases like:\n      1) opts = Masked\n      2) opts = { mask: Masked, ...instanceOpts }\n    */\n    const { mask=undefined, ...instanceOpts } =\n      opts instanceof IMask.Masked ? { mask: opts } :\n      isObject(opts) && (opts as FactoryInstanceOpts).mask instanceof IMask.Masked ? (opts as FactoryInstanceOpts) : {};\n\n    if (mask) {\n      const _mask = (mask as Masked).mask;\n\n      return {\n        ...pick(mask, (_, k: string) => !k.startsWith('_')),\n        mask: mask.constructor,\n        _mask,\n        ...instanceOpts,\n      } as NormalizedOpts<Opts>;\n    }\n  }\n\n  if (!isObject(opts)) return { mask: opts } as unknown as NormalizedOpts<Opts>;\n\n  return { ...opts } as unknown as NormalizedOpts<Opts>;\n}\n\n// TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754\n\n// From masked\n// export default function createMask<Opts extends Masked, ReturnMasked=Opts> (opts: Opts): ReturnMasked;\n// // From masked class\n// export default function createMask<Opts extends MaskedOptions<typeof Masked>, ReturnMasked extends Masked=InstanceType<Opts['mask']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedDate>, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedNumber>, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedEnum>, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedRange>, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedRegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedFunction>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedPattern>, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedDynamic>, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;\n// // From mask opts\n// export default function createMask<Opts extends MaskedOptions<Masked>, ReturnMasked=Opts extends MaskedOptions<infer M> ? M : never> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedNumberOptions, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedDateFactoryOptions, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedEnumOptions, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedRangeOptions, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedPatternOptions, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedDynamicOptions, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<RegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<Function>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;\n\n/** Creates new {@link Masked} depending on mask type */\nexport default\nfunction createMask<Opts extends FactoryArg> (opts: Opts): FactoryReturnMasked<Opts> {\n  if (IMask.Masked && (opts instanceof IMask.Masked)) return opts as FactoryReturnMasked<Opts>;\n  const nOpts = normalizeOpts(opts);\n\n  const MaskedClass = maskedClass(nOpts.mask);\n  if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be imported manually before creating mask.');\n\n  if (nOpts.mask === MaskedClass) delete nOpts.mask;\n  if ((nOpts as any)._mask) { nOpts.mask = (nOpts as any)._mask; delete (nOpts as any)._mask; }\n  return new MaskedClass(nOpts);\n}\n\n\nIMask.createMask = createMask;\n","import IMask from '../core/holder';\n\n\nexport\ntype ElementEvent =\n  'selectionChange' |\n  'input' |\n  'drop' |\n  'click' |\n  'focus' |\n  'commit';\n\n/**  Generic element API to use with mask */\nexport default\nabstract class MaskElement {\n  /** */\n  abstract _unsafeSelectionStart: number | null;\n  /** */\n  abstract _unsafeSelectionEnd: number | null;\n  /** */\n  abstract value: string;\n\n  /** Safely returns selection start */\n  get selectionStart (): number {\n    let start;\n    try {\n      start = this._unsafeSelectionStart;\n    } catch {}\n\n    return start != null ?\n      start :\n      this.value.length;\n  }\n\n  /** Safely returns selection end */\n  get selectionEnd (): number {\n    let end;\n    try {\n      end = this._unsafeSelectionEnd;\n    } catch {}\n\n    return end != null ?\n      end :\n      this.value.length;\n  }\n\n  /** Safely sets element selection */\n  select (start: number, end: number) {\n    if (start == null || end == null ||\n      start === this.selectionStart && end === this.selectionEnd) return;\n\n    try {\n      this._unsafeSelect(start, end);\n    } catch {}\n  }\n\n  /** */\n  get isActive (): boolean { return false; }\n  /** */\n  abstract _unsafeSelect (start: number, end: number): void;\n  /** */\n  abstract bindEvents (handlers: {[key in ElementEvent]: Function}): void;\n  /** */\n  abstract unbindEvents (): void\n}\n\n\nIMask.MaskElement = MaskElement;\n","import MaskElement, { type ElementEvent } from './mask-element';\nimport IMask from '../core/holder';\n\n\n/** Bridge between HTMLElement and {@link Masked} */\nexport default\nabstract class HTMLMaskElement extends MaskElement {\n  /** Mapping between HTMLElement events and mask internal events */\n  static EVENTS_MAP = {\n    selectionChange: 'keydown',\n    input: 'input',\n    drop: 'drop',\n    click: 'click',\n    focus: 'focus',\n    commit: 'blur',\n  } as const;\n  /** HTMLElement to use mask on */\n  declare input: HTMLElement;\n  declare _handlers: {[k: string]: EventListener};\n  abstract value: string;\n\n  constructor (input: HTMLElement) {\n    super();\n    this.input = input;\n    this._handlers = {};\n  }\n\n  get rootElement (): HTMLDocument {\n    return (this.input.getRootNode?.() ?? document) as HTMLDocument;\n  }\n\n  /**\n    Is element in focus\n  */\n  get isActive (): boolean {\n    return this.input === this.rootElement.activeElement;\n  }\n\n  /**\n    Binds HTMLElement events to mask internal events\n  */\n  override bindEvents (handlers: {[key in ElementEvent]: EventListener}) {\n    (Object.keys(handlers) as Array<ElementEvent>)\n      .forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\n  }\n\n  /**\n    Unbinds HTMLElement events to mask internal events\n  */\n  override unbindEvents () {\n    Object.keys(this._handlers)\n      .forEach(event => this._toggleEventHandler(event));\n  }\n\n  _toggleEventHandler (event: string, handler?: EventListener): void {\n    if (this._handlers[event]) {\n      this.input.removeEventListener(event, this._handlers[event]);\n      delete this._handlers[event];\n    }\n\n    if (handler) {\n      this.input.addEventListener(event, handler);\n      this._handlers[event] = handler;\n    }\n  }\n}\n\n\nIMask.HTMLMaskElement = HTMLMaskElement;\n","import HTMLMaskElement from './html-mask-element';\nimport IMask from '../core/holder';\n\nexport\ntype InputElement = HTMLTextAreaElement | HTMLInputElement;\n\n/** Bridge between InputElement and {@link Masked} */\nexport default\nclass HTMLInputMaskElement extends HTMLMaskElement {\n  /** InputElement to use mask on */\n  declare input: InputElement;\n\n  constructor (input: InputElement) {\n    super(input);\n    this.input = input;\n    this._handlers = {};\n  }\n\n  /** Returns InputElement selection start */\n  override get _unsafeSelectionStart (): number | null {\n    return this.input.selectionStart != null ? this.input.selectionStart : this.value.length;\n  }\n\n  /** Returns InputElement selection end */\n  override get _unsafeSelectionEnd (): number | null {\n    return this.input.selectionEnd;\n  }\n\n  /** Sets InputElement selection */\n  _unsafeSelect (start: number, end: number) {\n    this.input.setSelectionRange(start, end);\n  }\n\n  override get value (): string {\n    return this.input.value;\n  }\n  override set value (value: string) {\n    this.input.value = value;\n  }\n}\n\n\nIMask.HTMLMaskElement = HTMLMaskElement;\n","import HTMLMaskElement from './html-mask-element';\nimport IMask from '../core/holder';\n\n\nexport default\nclass HTMLContenteditableMaskElement extends HTMLMaskElement {\n  declare input: HTMLElement;\n  /** Returns HTMLElement selection start */\n  override get _unsafeSelectionStart (): number | null {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /** Returns HTMLElement selection end */\n  override get _unsafeSelectionEnd (): number | null {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /** Sets HTMLElement selection */\n  override _unsafeSelect (start: number, end: number) {\n    if (!this.rootElement.createRange) return;\n\n    const range = this.rootElement.createRange();\n    range.setStart(this.input.firstChild || this.input, start);\n    range.setEnd(this.input.lastChild || this.input, end);\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n  /** HTMLElement value */\n  override get value (): string {\n    return this.input.textContent || '';\n  }\n  override set value (value: string) {\n    this.input.textContent = value;\n  }\n}\n\n\nIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n","import { objectIncludes, DIRECTION, type Selection } from '../core/utils';\nimport ActionDetails from '../core/action-details';\nimport createMask, { type UpdateOpts, maskedClass, type FactoryArg, type FactoryReturnMasked } from '../masked/factory';\nimport Masked from '../masked/base';\nimport MaskElement from './mask-element';\nimport HTMLInputMaskElement, { type InputElement } from './html-input-mask-element';\nimport HTMLContenteditableMaskElement from './html-contenteditable-mask-element';\nimport IMask from '../core/holder';\n\n\nexport\ntype InputMaskElement = MaskElement | InputElement | HTMLElement;\n\nexport\ntype InputMaskEventListener = (e?: InputEvent) => void;\n\n/** Listens to element events and controls changes between element and {@link Masked} */\nexport default\nclass InputMask<Opts extends FactoryArg> {\n  /**\n    View element\n  */\n  declare el: MaskElement;\n\n  /** Internal {@link Masked} model */\n  declare masked: FactoryReturnMasked<Opts>;\n\n  declare _listeners: Record<string, Array<InputMaskEventListener>>;\n  declare _value: string;\n  declare _changingCursorPos: number;\n  declare _unmaskedValue: string;\n  declare _selection: Selection;\n  declare _cursorChanging?: ReturnType<typeof setTimeout>;\n  declare _inputEvent?: InputEvent;\n\n  constructor (el: InputMaskElement, opts: Opts) {\n    this.el =\n      (el instanceof MaskElement) ? el :\n      (el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA') ? new HTMLContenteditableMaskElement(el) :\n      new HTMLInputMaskElement(el as InputElement);\n\n    this.masked = createMask(opts);\n\n    this._listeners = {};\n    this._value = '';\n    this._unmaskedValue = '';\n\n    this._saveSelection = this._saveSelection.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onDrop = this._onDrop.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onClick = this._onClick.bind(this);\n    this.alignCursor = this.alignCursor.bind(this);\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n\n    this._bindEvents();\n\n    // refresh\n    this.updateValue();\n    this._onChange();\n  }\n\n  maskEquals (mask: any): boolean {\n    return mask == null || this.masked?.maskEquals(mask);\n  }\n\n  /** Masked */\n  get mask (): FactoryReturnMasked<Opts>['mask'] {\n    return this.masked.mask;\n  }\n  set mask (mask: any) {\n    if (this.maskEquals(mask)) return;\n\n    if (!((mask as Masked) instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask as Masked)) {\n      // TODO \"any\" no idea\n      this.masked.updateOptions({ mask } as any);\n      return;\n    }\n\n    const masked = (mask instanceof IMask.Masked ? mask : createMask({ mask } as Opts)) as FactoryReturnMasked<Opts>;\n    masked.unmaskedValue = this.masked.unmaskedValue;\n    this.masked = masked;\n  }\n\n  /** Raw value */\n  get value (): string {\n    return this._value;\n  }\n\n  set value (str: string) {\n    if (this.value === str) return;\n\n    this.masked.value = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Unmasked value */\n  get unmaskedValue (): string {\n    return this._unmaskedValue;\n  }\n\n  set unmaskedValue (str: string) {\n    if (this.unmaskedValue === str) return;\n\n    this.masked.unmaskedValue = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Typed unmasked value */\n  get typedValue (): FactoryReturnMasked<Opts>['typedValue'] {\n    return this.masked.typedValue;\n  }\n\n  set typedValue (val: FactoryReturnMasked<Opts>['typedValue']) {\n    if (this.masked.typedValueEquals(val)) return;\n\n    this.masked.typedValue = val;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Display value */\n  get displayValue (): string {\n    return this.masked.displayValue;\n  }\n\n  /** Starts listening to element events */\n  _bindEvents () {\n    this.el.bindEvents({\n      selectionChange: this._saveSelection,\n      input: this._onInput,\n      drop: this._onDrop,\n      click: this._onClick,\n      focus: this._onFocus,\n      commit: this._onChange,\n    });\n  }\n\n  /** Stops listening to element events */\n  _unbindEvents () {\n    if (this.el) this.el.unbindEvents();\n  }\n\n  /** Fires custom event */\n  _fireEvent (ev: string, e?: InputEvent) {\n    const listeners = this._listeners[ev];\n    if (!listeners) return;\n\n    listeners.forEach(l => l(e));\n  }\n\n  /** Current selection start */\n  get selectionStart (): number {\n    return this._cursorChanging ?\n      this._changingCursorPos :\n\n      this.el.selectionStart;\n  }\n\n  /** Current cursor position */\n  get cursorPos (): number {\n    return this._cursorChanging ?\n      this._changingCursorPos :\n\n      this.el.selectionEnd;\n  }\n  set cursorPos (pos: number) {\n    if (!this.el || !this.el.isActive) return;\n\n    this.el.select(pos, pos);\n    this._saveSelection();\n  }\n\n  /** Stores current selection */\n  _saveSelection (/* ev */) {\n    if (this.displayValue !== this.el.value) {\n      console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n    }\n    this._selection = {\n      start: this.selectionStart,\n      end: this.cursorPos,\n    };\n  }\n\n  /** Syncronizes model value from view */\n  updateValue () {\n    this.masked.value = this.el.value;\n    this._value = this.masked.value;\n  }\n\n  /** Syncronizes view from model value, fires change events */\n  updateControl () {\n    const newUnmaskedValue = this.masked.unmaskedValue;\n    const newValue = this.masked.value;\n    const newDisplayValue = this.displayValue;\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\n      this.value !== newValue);\n\n    this._unmaskedValue = newUnmaskedValue;\n    this._value = newValue;\n\n    if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;\n    if (isChanged) this._fireChangeEvents();\n  }\n\n  /** Updates options with deep equal check, recreates {@link Masked} model if mask type changes */\n  updateOptions(opts: UpdateOpts<Opts>) {\n    const { mask, ...restOpts } = opts;\n\n    const updateMask = !this.maskEquals(mask);\n    const updateOpts = !objectIncludes(this.masked, restOpts);\n\n    if (updateMask) this.mask = mask;\n    if (updateOpts) this.masked.updateOptions(restOpts);  // TODO\n\n    if (updateMask || updateOpts) this.updateControl();\n  }\n\n  /** Updates cursor */\n  updateCursor (cursorPos: number) {\n    if (cursorPos == null) return;\n    this.cursorPos = cursorPos;\n\n    // also queue change cursor for mobile browsers\n    this._delayUpdateCursor(cursorPos);\n  }\n\n  /** Delays cursor update to support mobile browsers */\n  _delayUpdateCursor (cursorPos: number) {\n    this._abortUpdateCursor();\n    this._changingCursorPos = cursorPos;\n    this._cursorChanging = setTimeout(() => {\n      if (!this.el) return; // if was destroyed\n      this.cursorPos = this._changingCursorPos;\n      this._abortUpdateCursor();\n    }, 10);\n  }\n\n  /** Fires custom events */\n  _fireChangeEvents () {\n    this._fireEvent('accept', this._inputEvent);\n    if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n  }\n\n  /** Aborts delayed cursor update */\n  _abortUpdateCursor () {\n    if (this._cursorChanging) {\n      clearTimeout(this._cursorChanging);\n      delete this._cursorChanging;\n    }\n  }\n\n  /** Aligns cursor to nearest available position */\n  alignCursor () {\n    this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));\n  }\n\n  /** Aligns cursor only if selection is empty */\n  alignCursorFriendly () {\n    if (this.selectionStart !== this.cursorPos) return;  // skip if range is selected\n    this.alignCursor();\n  }\n\n  /** Adds listener on custom event */\n  on (ev: string, handler: InputMaskEventListener): this {\n    if (!this._listeners[ev]) this._listeners[ev] = [];\n    this._listeners[ev].push(handler);\n    return this;\n  }\n\n  /** Removes custom event listener */\n  off (ev: string, handler: InputMaskEventListener): this {\n    if (!this._listeners[ev]) return this;\n    if (!handler) {\n      delete this._listeners[ev];\n      return this;\n    }\n    const hIndex = this._listeners[ev].indexOf(handler);\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n    return this;\n  }\n\n  /** Handles view input event */\n  _onInput (e: InputEvent): void {\n    this._inputEvent = e;\n    this._abortUpdateCursor();\n\n    // fix strange IE behavior\n    if (!this._selection) return this.updateValue();\n\n    const details = new ActionDetails({\n      // new state\n      value: this.el.value,\n      cursorPos: this.cursorPos,\n\n      // old state\n      oldValue: this.displayValue,\n      oldSelection: this._selection,\n    });\n\n    const oldRawValue = this.masked.rawInputValue;\n\n    const offset = this.masked.splice(\n      details.startChangePos,\n      details.removed.length,\n      details.inserted,\n      details.removeDirection,\n      { input: true, raw: true },\n    ).offset;\n\n    // force align in remove direction only if no input chars were removed\n    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n    const removeDirection = oldRawValue === this.masked.rawInputValue ?\n      details.removeDirection :\n      DIRECTION.NONE;\n\n    let cursorPos = this.masked.nearestInputPos(\n      details.startChangePos + offset,\n      removeDirection,\n    );\n    if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);\n\n    this.updateControl();\n    this.updateCursor(cursorPos);\n    delete this._inputEvent;\n  }\n\n  /** Handles view change event and commits model value */\n  _onChange () {\n    if (this.displayValue !== this.el.value) {\n      this.updateValue();\n    }\n    this.masked.doCommit();\n    this.updateControl();\n    this._saveSelection();\n  }\n\n  /** Handles view drop event, prevents by default */\n  _onDrop (ev: Event) {\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  /** Restore last selection on focus */\n  _onFocus (ev: Event) {\n    this.alignCursorFriendly();\n  }\n\n  /** Restore last selection on focus */\n  _onClick (ev: Event) {\n    this.alignCursorFriendly();\n  }\n\n  /** Unbind view events and removes element reference */\n  destroy () {\n    this._unbindEvents();\n    (this._listeners as any).length = 0;\n    delete (this as any).el;\n  }\n}\n\n\nIMask.InputMask = InputMask;\n","import IMask from \"./holder\";\n\n\nexport\ntype ChangeDetailsOptions = Pick<ChangeDetails,\n  | 'inserted'\n  | 'skip'\n  | 'tailShift'\n  | 'rawInserted'\n>;\n\n/** Provides details of changing model value */\nexport default\nclass ChangeDetails {\n  /** Inserted symbols */\n  declare inserted: string;\n  /** Can skip chars */\n  declare skip: boolean;\n  /** Additional offset if any changes occurred before tail */\n  declare tailShift: number;\n  /** Raw inserted is used by dynamic mask */\n  declare rawInserted: string;\n\n  static normalize (prep: string | [string, ChangeDetails]): [string, ChangeDetails] {\n    return Array.isArray(prep) ? prep : [\n      prep,\n      new ChangeDetails(),\n    ];\n  }\n\n  constructor (details?: Partial<ChangeDetailsOptions>) {\n    Object.assign(this, {\n      inserted: '',\n      rawInserted: '',\n      skip: false,\n      tailShift: 0,\n    }, details);\n  }\n\n  /** Aggregate changes */\n  aggregate (details: ChangeDetails): this {\n    this.rawInserted += details.rawInserted;\n    this.skip = this.skip || details.skip;\n    this.inserted += details.inserted;\n    this.tailShift += details.tailShift;\n    return this;\n  }\n\n  /** Total offset considering all changes */\n  get offset (): number {\n    return this.tailShift + this.inserted.length;\n  }\n}\n\n\nIMask.ChangeDetails = ChangeDetails;\n","import type { TailDetails, AppendTail } from './tail-details';\nimport type ChangeDetails from './change-details';\n\n\ntype ContinuousTailState = Pick<ContinuousTailDetails,\n  | 'value'\n  | 'from'\n  | 'stop'\n>;\n\n/** Provides details of continuous extracted tail */\nexport default\nclass ContinuousTailDetails implements TailDetails {\n  /** Tail value as string */\n  declare value: string;\n  /** Tail start position */\n  declare from: number;\n  /** Start position */\n  declare stop?: number;\n\n  constructor (value: string='', from: number=0, stop?: number) {\n    this.value = value;\n    this.from = from;\n    this.stop = stop;\n  }\n\n  toString (): string { return this.value; }\n\n  extend (tail: string | TailDetails): void {\n    this.value += String(tail);\n  }\n\n  appendTo (masked: AppendTail): ChangeDetails {\n    return masked.append(this.toString(), { tail: true })\n      .aggregate(masked._appendPlaceholder());\n  }\n\n  get state (): ContinuousTailState {\n    return {\n      value: this.value,\n      from: this.from,\n      stop: this.stop,\n    };\n  }\n\n  set state (state: ContinuousTailState) {\n    Object.assign(this, state);\n  }\n\n  unshift (beforePos?: number): string {\n    if (!this.value.length || (beforePos != null && this.from >= beforePos)) return '';\n\n    const shiftChar = this.value[0];\n    this.value = this.value.slice(1);\n    return shiftChar;\n  }\n\n  shift (): string {\n    if (!this.value.length) return '';\n\n    const shiftChar = this.value[this.value.length-1];\n    this.value = this.value.slice(0, -1);\n    return shiftChar;\n  }\n}\n","import ChangeDetails from '../core/change-details';\nimport ContinuousTailDetails from '../core/continuous-tail-details';\nimport { type Direction, DIRECTION, isString, forceDirection } from '../core/utils';\nimport { type TailDetails } from '../core/tail-details';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedState = {\n  _value: string,\n  _rawInputValue: string,\n};\n\n/** Append flags */\nexport\ntype AppendFlags<State=MaskedState> = {\n  input?: boolean,\n  tail?: boolean,\n  raw?: boolean,\n  _beforeTailState?: State,\n};\n\n/** Extract flags */\nexport\ntype ExtractFlags = {\n  raw?: boolean\n};\n\n// see https://github.com/microsoft/TypeScript/issues/6223\n\nexport\ntype MaskedOptions<M extends Masked=Masked, Props extends keyof M=never> = Partial<Pick<M,\n  | 'mask'\n  | 'parent'\n  | 'prepare'\n  | 'prepareChar'\n  | 'validate'\n  | 'commit'\n  | 'format'\n  | 'parse'\n  | 'overwrite'\n  | 'eager'\n  | 'skipInvalid'\n  | Props\n>>;\n\n\n/** Provides common masking stuff */\nexport default\nabstract class Masked<Value=any> {\n  static DEFAULTS: Record<string, any> = {\n    skipInvalid: true,\n  } satisfies Partial<MaskedOptions>;\n  static EMPTY_VALUES: Array<any> = [undefined, null, ''];\n\n  /** */\n  declare mask: unknown;\n  /** */\n  declare parent?: Masked;\n  /** Transforms value before mask processing */\n  declare prepare?: (chars: string, masked: Masked, flags: AppendFlags) => string | [string, ChangeDetails];\n  /** Transforms each char before mask processing */\n  declare prepareChar?: (chars: string, masked: Masked, flags: AppendFlags) => string | [string, ChangeDetails];\n  /** Validates if value is acceptable */\n  declare validate?: (value: string, masked: Masked, flags: AppendFlags) => boolean;\n  /** Does additional processing at the end of editing */\n  declare commit?: (value: string, masked: Masked) => void;\n  /** Format typed value to string */\n  declare format?: (value: Value, masked: Masked) => string;\n  /** Parse string to get typed value */\n  declare parse?: (str: string, masked: Masked) => Value;\n  /** Enable characters overwriting */\n  abstract overwrite?: boolean | 'shift' | undefined;\n  /** */\n  abstract eager?: boolean | 'remove' | 'append' | undefined;\n  /** */\n  abstract skipInvalid?: boolean | undefined;\n\n  /** */\n  declare _initialized: boolean;\n\n  declare _value: string;\n  declare _refreshing?: boolean;\n  declare _isolated?: boolean;\n\n  constructor (opts: MaskedOptions) {\n    this._value = '';\n    this._update({\n      ...Masked.DEFAULTS,\n      ...opts,\n    });\n    this._initialized = true;\n  }\n\n  /** Sets and applies new options */\n  updateOptions (opts: Partial<MaskedOptions>) {\n    if (!Object.keys(opts).length) return;\n\n    this.withValueRefresh(this._update.bind(this, opts));\n  }\n\n  /** Sets new options */\n  _update (opts: Partial<MaskedOptions>) {\n    Object.assign(this, opts);\n  }\n\n  /** Mask state */\n  get state (): MaskedState {\n    return {\n      _value: this.value,\n      _rawInputValue: this.rawInputValue,\n    };\n  }\n\n  set state (state: MaskedState) {\n    this._value = state._value;\n  }\n\n  /** Resets value */\n  reset () {\n    this._value = '';\n  }\n\n  get value (): string {\n    return this._value;\n  }\n\n  set value (value: string) {\n    this.resolve(value, { input: true });\n  }\n\n  /** Resolve new value */\n  resolve (value: string, flags: AppendFlags={ input: true }): void {\n    this.reset();\n    this.append(value, flags, '');\n    this.doCommit();\n  }\n\n  get unmaskedValue (): string {\n    return this.value;\n  }\n\n  set unmaskedValue (value: string) {\n    this.resolve(value, {});\n  }\n\n  get typedValue (): Value {\n    return this.parse ? this.parse(this.value, this) : this.unmaskedValue as Value;\n  }\n\n  set typedValue (value: Value) {\n    if (this.format) {\n      this.value = this.format(value, this);\n    } else {\n      this.unmaskedValue = String(value);\n    }\n  }\n\n  /** Value that includes raw user input */\n  get rawInputValue (): string {\n    return this.extractInput(0, this.displayValue.length, {raw: true});\n  }\n\n  set rawInputValue (value: string) {\n    this.resolve(value, { raw: true });\n  }\n\n  get displayValue (): string {\n    return this.value;\n  }\n\n  get isComplete (): boolean {\n    return true;\n  }\n\n  get isFilled (): boolean {\n    return this.isComplete;\n  }\n\n  /** Finds nearest input position in direction */\n  nearestInputPos (cursorPos: number, direction?: Direction): number {\n    return cursorPos;\n  }\n\n  totalInputPositions (fromPos: number=0, toPos: number=this.displayValue.length): number {\n    return Math.min(this.displayValue.length, toPos - fromPos);\n  }\n\n  /** Extracts value in range considering flags */\n  extractInput (fromPos: number=0, toPos: number=this.displayValue.length, flags?: ExtractFlags): string {\n    return this.displayValue.slice(fromPos, toPos);\n  }\n\n  /** Extracts tail in range */\n  extractTail (fromPos: number=0, toPos: number=this.displayValue.length): TailDetails {\n    return new ContinuousTailDetails(this.extractInput(fromPos, toPos), fromPos);\n  }\n\n  /** Appends tail */\n  appendTail (tail: string | String | TailDetails): ChangeDetails {\n    if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n\n    return (tail as TailDetails).appendTo(this);\n  }\n\n  /** Appends char */\n  _appendCharRaw (ch: string, flags: AppendFlags={}): ChangeDetails {\n    if (!ch) return new ChangeDetails();\n\n    this._value += ch;\n    return new ChangeDetails({\n      inserted: ch,\n      rawInserted: ch,\n    });\n  }\n\n  /** Appends char */\n  _appendChar (ch: string, flags: AppendFlags={}, checkTail?: TailDetails): ChangeDetails {\n    const consistentState: MaskedState = this.state;\n    let details: ChangeDetails;\n    [ch, details] = this.doPrepareChar(ch, flags);\n\n    details = details.aggregate(this._appendCharRaw(ch, flags));\n\n    if (details.inserted) {\n      let consistentTail;\n      let appended = this.doValidate(flags) !== false;\n\n      if (appended && checkTail != null) {\n        // validation ok, check tail\n        const beforeTailState = this.state;\n        if (this.overwrite === true) {\n          consistentTail = checkTail.state;\n          checkTail.unshift(this.displayValue.length - details.tailShift);\n        }\n\n        let tailDetails = this.appendTail(checkTail);\n        appended = tailDetails.rawInserted === checkTail.toString();\n\n        // not ok, try shift\n        if (!(appended && tailDetails.inserted) && this.overwrite === 'shift') {\n          this.state = beforeTailState;\n          consistentTail = checkTail.state;\n          checkTail.shift();\n\n          tailDetails = this.appendTail(checkTail);\n          appended = tailDetails.rawInserted === checkTail.toString();\n        }\n\n        // if ok, rollback state after tail\n        if (appended && tailDetails.inserted) this.state = beforeTailState;\n      }\n\n      // revert all if something went wrong\n      if (!appended) {\n        details = new ChangeDetails();\n        this.state = consistentState;\n        if (checkTail && consistentTail) checkTail.state = consistentTail;\n      }\n    }\n    return details;\n  }\n\n  /** Appends optional placeholder at the end */\n  _appendPlaceholder (): ChangeDetails {\n    return new ChangeDetails();\n  }\n\n  /** Appends optional eager placeholder at the end */\n  _appendEager (): ChangeDetails {\n    return new ChangeDetails();\n  }\n\n  /** Appends symbols considering flags */\n  append (str: string, flags?: AppendFlags, tail?: string | String | TailDetails): ChangeDetails {\n    if (!isString(str)) throw new Error('value should be string');\n    const checkTail = isString(tail) ? new ContinuousTailDetails(String(tail)) : tail as TailDetails;\n    if (flags?.tail) flags._beforeTailState = this.state;\n\n    let details;\n    [str, details] = this.doPrepare(str, flags);\n\n    for (let ci=0; ci<str.length; ++ci) {\n      const d = this._appendChar(str[ci], flags, checkTail);\n      if (!d.rawInserted && !this.doSkipInvalid(str[ci], flags, checkTail)) break;\n      details.aggregate(d);\n    }\n\n    if ((this.eager === true || this.eager === 'append') && flags?.input && str) {\n      details.aggregate(this._appendEager());\n    }\n\n    // append tail but aggregate only tailShift\n    if (checkTail != null) {\n      details.tailShift += this.appendTail(checkTail).tailShift;\n      // TODO it's a good idea to clear state after appending ends\n      // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\n      // this._resetBeforeTailState();\n    }\n\n    return details;\n  }\n\n  remove (fromPos: number=0, toPos: number=this.displayValue.length): ChangeDetails {\n    this._value = this.displayValue.slice(0, fromPos) + this.displayValue.slice(toPos);\n    return new ChangeDetails();\n  }\n\n  /** Calls function and reapplies current value */\n  withValueRefresh<T>(fn: () => T): T {\n    if (this._refreshing || !this._initialized) return fn();\n    this._refreshing = true;\n\n    const rawInput = this.rawInputValue;\n    const value = this.value;\n\n    const ret = fn();\n\n    this.rawInputValue = rawInput;\n    // append lost trailing chars at the end\n    if (this.value && this.value !== value && value.indexOf(this.value) === 0) {\n      this.append(value.slice(this.displayValue.length), {}, '');\n    }\n\n    delete this._refreshing;\n    return ret;\n  }\n\n  runIsolated<T>(fn: (masked: this) => T): T {\n    if (this._isolated || !this._initialized) return fn(this);\n    this._isolated = true;\n    const state = this.state;\n\n    const ret = fn(this);\n\n    this.state = state;\n    delete this._isolated;\n\n    return ret;\n  }\n\n  doSkipInvalid (ch: string, flags: AppendFlags={}, checkTail?: TailDetails): boolean {\n    return Boolean(this.skipInvalid);\n  }\n\n  /** Prepares string before mask processing */\n  doPrepare (str: string, flags: AppendFlags={}): [string, ChangeDetails] {\n    return ChangeDetails.normalize(this.prepare ?\n      this.prepare(str, this, flags) :\n      str);\n  }\n\n  /** Prepares each char before mask processing */\n  doPrepareChar (str: string, flags: AppendFlags={}): [string, ChangeDetails] {\n    return ChangeDetails.normalize(this.prepareChar ?\n      this.prepareChar(str, this, flags) :\n      str);\n  }\n\n  /** Validates if value is acceptable */\n  doValidate (flags: AppendFlags): boolean {\n    return (!this.validate || this.validate(this.value, this, flags)) &&\n      (!this.parent || this.parent.doValidate(flags));\n  }\n\n  /** Does additional processing at the end of editing */\n  doCommit () {\n    if (this.commit) this.commit(this.value, this);\n  }\n\n  splice (start: number, deleteCount: number, inserted: string, removeDirection: Direction = DIRECTION.NONE, flags: AppendFlags = { input: true }): ChangeDetails {\n    const tailPos: number = start + deleteCount;\n    const tail: TailDetails = this.extractTail(tailPos);\n\n    const eagerRemove = this.eager === true || this.eager === 'remove';\n\n    let oldRawValue;\n    if (eagerRemove)  {\n      removeDirection = forceDirection(removeDirection);\n      oldRawValue = this.extractInput(0, tailPos, {raw: true});\n    }\n\n    let startChangePos: number = start;\n    const details: ChangeDetails = new ChangeDetails();\n\n    // if it is just deletion without insertion\n    if (removeDirection !== DIRECTION.NONE) {\n      startChangePos = this.nearestInputPos(start,\n        deleteCount > 1 && start !== 0 && !eagerRemove ?\n        DIRECTION.NONE :\n        removeDirection\n      );\n\n      // adjust tailShift if start was aligned\n      details.tailShift = startChangePos - start;\n    }\n\n    details.aggregate(this.remove(startChangePos));\n\n    if (eagerRemove && removeDirection !== DIRECTION.NONE && oldRawValue === this.rawInputValue) {\n      if (removeDirection === DIRECTION.FORCE_LEFT) {\n        let valLength;\n        while (oldRawValue === this.rawInputValue && (valLength = this.displayValue.length)) {\n          details\n            .aggregate(new ChangeDetails({ tailShift: -1 }))\n            .aggregate(this.remove(valLength-1));\n        }\n      } else if (removeDirection === DIRECTION.FORCE_RIGHT) {\n        tail.unshift();\n      }\n    }\n\n    return details.aggregate(this.append(inserted, flags, tail));\n  }\n\n  maskEquals (mask: any): boolean {\n    return this.mask === mask;\n  }\n\n  typedValueEquals (value: any): boolean {\n    const tval = this.typedValue;\n\n    return value === tval ||\n      Masked.EMPTY_VALUES.includes(value) && Masked.EMPTY_VALUES.includes(tval) ||\n      (this.format ? this.format(value, this) === this.format(this.typedValue, this) : false);\n  }\n}\n\n\nIMask.Masked = Masked;\n","import type { TailDetails, AppendTail } from '../../core/tail-details';\nimport ChangeDetails from '../../core/change-details';\nimport { isString } from '../../core/utils';\nimport ContinuousTailDetails from '../../core/continuous-tail-details';\nimport IMask from '../../core/holder';\nimport type MaskedPattern from '../pattern';\n\n\nexport\ntype ChunksTailState = Pick<ChunksTailDetails,\n  | 'from'\n  | 'stop'\n  | 'blockIndex'\n> & { chunks: Array<TailDetails['state']> };\n\nexport default\nclass ChunksTailDetails implements TailDetails {\n  declare chunks: Array<TailDetails>;\n  declare from: number;\n  declare stop?: number;\n  /** */\n  declare blockIndex?: number;\n\n  constructor (chunks: Array<TailDetails>=[], from: number=0) {\n    this.chunks = chunks;\n    this.from = from;\n  }\n\n  toString (): string {\n    return this.chunks.map(String).join('');\n  }\n\n  extend (tailChunk: string | String | TailDetails): void {\n    if (!String(tailChunk)) return;\n    tailChunk = (isString(tailChunk) ? new ContinuousTailDetails(String(tailChunk)) : tailChunk) as TailDetails;\n\n    const lastChunk = this.chunks[this.chunks.length-1];\n    const extendLast = lastChunk &&\n      // if stops are same or tail has no stop\n      (lastChunk.stop === tailChunk.stop || tailChunk.stop == null) &&\n      // if tail chunk goes just after last chunk\n      tailChunk.from === (lastChunk.from + lastChunk.toString().length);\n\n    if (tailChunk instanceof ContinuousTailDetails) {\n      // check the ability to extend previous chunk\n      if (extendLast) {\n        // extend previous chunk\n        lastChunk.extend(tailChunk.toString());\n      } else {\n        // append new chunk\n        this.chunks.push(tailChunk);\n      }\n    } else if (tailChunk instanceof ChunksTailDetails) {\n      if (tailChunk.stop == null) {\n        // unwrap floating chunks to parent, keeping `from` pos\n        let firstTailChunk;\n        while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\n          firstTailChunk = tailChunk.chunks.shift() as TailDetails;  // not possible to be `undefined` because length was checked above\n          firstTailChunk.from += tailChunk.from;\n          this.extend(firstTailChunk);\n        }\n      }\n\n      // if tail chunk still has value\n      if (tailChunk.toString()) {\n        // if chunks contains stops, then popup stop to container\n        tailChunk.stop = tailChunk.blockIndex;\n        this.chunks.push(tailChunk);\n      }\n    }\n  }\n\n  appendTo (masked: AppendTail | MaskedPattern): ChangeDetails {\n    if (!(masked instanceof IMask.MaskedPattern)) {\n      const tail = new ContinuousTailDetails(this.toString());\n      return tail.appendTo(masked);\n    }\n\n    const details = new ChangeDetails();\n\n    for (let ci=0; ci < this.chunks.length && !details.skip; ++ci) {\n      const chunk = this.chunks[ci];\n\n      const lastBlockIter = masked._mapPosToBlock(masked.displayValue.length);\n      const stop = chunk.stop;\n      let chunkBlock;\n      if (stop != null &&\n        // if block not found or stop is behind lastBlock\n        (!lastBlockIter || lastBlockIter.index <= stop)\n      ) {\n        if (\n          chunk instanceof ChunksTailDetails ||\n          // for continuous block also check if stop is exist\n          masked._stops.indexOf(stop) >= 0\n        ) {\n          const phDetails = masked._appendPlaceholder(stop);\n          details.aggregate(phDetails);\n        }\n        chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\n      }\n\n      if (chunkBlock) {\n        const tailDetails = chunkBlock.appendTail(chunk);\n        tailDetails.skip = false; // always ignore skip, it will be set on last\n        details.aggregate(tailDetails);\n        masked._value += tailDetails.inserted;\n\n        // get not inserted chars\n        const remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\n        if (remainChars) details.aggregate(masked.append(remainChars, { tail: true }));\n      } else {\n        details.aggregate(masked.append(chunk.toString(), { tail: true }));\n      }\n    }\n\n    return details;\n  }\n\n  get state (): ChunksTailState {\n    return {\n      chunks: this.chunks.map(c => c.state),\n      from: this.from,\n      stop: this.stop,\n      blockIndex: this.blockIndex,\n    };\n  }\n\n  set state (state: ChunksTailState) {\n    const { chunks, ...props } = state;\n    Object.assign(this, props);\n    this.chunks = chunks.map(cstate => {\n      const chunk = \"chunks\" in cstate ?\n        new ChunksTailDetails() :\n        new ContinuousTailDetails();\n      chunk.state = cstate;\n      return chunk;\n    });\n  }\n\n  unshift (beforePos?: number): string {\n    if (!this.chunks.length || (beforePos != null && this.from >= beforePos)) return '';\n\n    const chunkShiftPos = beforePos != null ? beforePos - this.from : beforePos;\n    let ci=0;\n    while (ci < this.chunks.length) {\n      const chunk = this.chunks[ci];\n      const shiftChar = chunk.unshift(chunkShiftPos);\n\n      if (chunk.toString()) {\n        // chunk still contains value\n        // but not shifted - means no more available chars to shift\n        if (!shiftChar) break;\n        ++ci;\n      } else {\n        // clean if chunk has no value\n        this.chunks.splice(ci, 1);\n      }\n\n      if (shiftChar) return shiftChar;\n    }\n\n    return '';\n  }\n\n  shift (): string {\n    if (!this.chunks.length) return '';\n\n    let ci=this.chunks.length-1;\n    while (0 <= ci) {\n      const chunk = this.chunks[ci];\n      const shiftChar = chunk.shift();\n\n      if (chunk.toString()) {\n        // chunk still contains value\n        // but not shifted - means no more available chars to shift\n        if (!shiftChar) break;\n        --ci;\n      } else {\n        // clean if chunk has no value\n        this.chunks.splice(ci, 1);\n      }\n\n      if (shiftChar) return shiftChar;\n    }\n\n    return '';\n  }\n}\n","import { DIRECTION } from '../../core/utils';\nimport type MaskedPattern from '../pattern';\nimport type PatternBlock from './block';\n\n\ntype PatternCursorState = { offset: number, index: number, ok: boolean };\n\nexport default\nclass PatternCursor<Value> {\n  declare masked: MaskedPattern<Value>;\n  declare offset: number;\n  declare index: number;\n  declare ok: boolean;\n  declare _log: PatternCursorState[];\n\n  constructor (masked: MaskedPattern<Value>, pos: number) {\n    this.masked = masked;\n    this._log = [];\n\n    const { offset, index } = masked._mapPosToBlock(pos) || (\n      pos < 0 ?\n        // first\n        { index: 0, offset: 0 } :\n        // last\n        { index: this.masked._blocks.length, offset: 0 }\n    );\n    this.offset = offset;\n    this.index = index;\n    this.ok = false;\n  }\n\n  get block (): PatternBlock {\n    return this.masked._blocks[this.index];\n  }\n\n  get pos (): number {\n    return this.masked._blockStartPos(this.index) + this.offset;\n  }\n\n  get state (): PatternCursorState {\n    return { index: this.index, offset: this.offset, ok: this.ok };\n  }\n\n  set state (s: PatternCursorState) {\n    Object.assign(this, s);\n  }\n\n  pushState () {\n    this._log.push(this.state);\n  }\n\n  popState (): PatternCursorState | undefined {\n    const s = this._log.pop();\n    if (s) this.state = s;\n    return s;\n  }\n\n  bindBlock () {\n    if (this.block) return;\n    if (this.index < 0) {\n      this.index = 0;\n      this.offset = 0;\n    }\n    if (this.index >= this.masked._blocks.length) {\n      this.index = this.masked._blocks.length - 1;\n      this.offset = (this.block as unknown as PatternBlock).displayValue.length; // TODO this is stupid type error, `block` depends on index that was changed above\n    }\n  }\n\n  _pushLeft(fn: () => boolean | undefined): boolean {\n    this.pushState();\n    for (this.bindBlock(); 0<=this.index; --this.index, this.offset=this.block?.displayValue.length || 0) {\n      if (fn()) return this.ok = true;\n    }\n\n    return this.ok = false;\n  }\n\n  _pushRight (fn: () => boolean | undefined): boolean {\n    this.pushState();\n    for (this.bindBlock(); this.index<this.masked._blocks.length; ++this.index, this.offset=0) {\n      if (fn()) return this.ok = true;\n    }\n\n    return this.ok = false;\n  }\n\n  pushLeftBeforeFilled (): boolean {\n    return this._pushLeft(() => {\n      if (this.block.isFixed || !this.block.value) return;\n\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_LEFT);\n      if (this.offset !== 0) return true;\n    });\n  }\n\n  pushLeftBeforeInput (): boolean {\n    // cases:\n    // filled input: 00|\n    // optional empty input: 00[]|\n    // nested block: XX<[]>|\n    return this._pushLeft(() => {\n      if (this.block.isFixed) return;\n\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);\n      return true;\n    });\n  }\n\n  pushLeftBeforeRequired (): boolean {\n    return this._pushLeft(() => {\n      if (this.block.isFixed || this.block.isOptional && !this.block.value) return;\n\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);\n      return true;\n    });\n  }\n\n  pushRightBeforeFilled (): boolean {\n    return this._pushRight(() => {\n      if (this.block.isFixed || !this.block.value) return;\n\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_RIGHT);\n      if (this.offset !== this.block.value.length) return true;\n    });\n  }\n\n  pushRightBeforeInput (): boolean {\n    return this._pushRight(() => {\n      if (this.block.isFixed) return;\n\n      // const o = this.offset;\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);\n      // HACK cases like (STILL DOES NOT WORK FOR NESTED)\n      // aa|X\n      // aa<X|[]>X_    - this will not work\n      // if (o && o === this.offset && this.block instanceof PatternInputDefinition) continue;\n      return true;\n    });\n  }\n\n  pushRightBeforeRequired (): boolean {\n    return this._pushRight(() => {\n      if (this.block.isFixed || this.block.isOptional && !this.block.value) return;\n\n      // TODO check |[*]XX_\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);\n      return true;\n    });\n  }\n}\n","import ChangeDetails from '../../core/change-details';\nimport { DIRECTION, type Direction, isString } from '../../core/utils';\nimport { type TailDetails } from '../../core/tail-details';\nimport ContinuousTailDetails from '../../core/continuous-tail-details';\nimport { type ExtractFlags, type AppendFlags, type MaskedState } from '../base';\nimport type PatternBlock from './block';\n\n\nexport\ntype PatternFixedDefinitionOptions = Pick<PatternFixedDefinition, 'char' | 'isUnmasking' | 'eager'>;\n\n\nexport default\nclass PatternFixedDefinition implements PatternBlock {\n  /** */\n  declare _value: string;\n  /** */\n  declare char: string;\n  /** */\n  declare isUnmasking?: boolean;\n  /** */\n  declare eager: boolean | 'remove' | 'append' | undefined;\n  /** */\n  declare _isRawInput?: boolean;\n  /** */\n  declare isFixed: boolean;\n\n  constructor(opts: PatternFixedDefinitionOptions) {\n    Object.assign(this, opts);\n    this._value = '';\n    this.isFixed = true;\n  }\n\n  get value (): string {\n    return this._value;\n  }\n\n  get unmaskedValue (): string {\n    return this.isUnmasking ? this.value : '';\n  }\n\n  get rawInputValue (): string {\n    return this._isRawInput ? this.value : '';\n  }\n\n  get displayValue (): string {\n    return this.value;\n  }\n\n  reset () {\n    this._isRawInput = false;\n    this._value = '';\n  }\n\n  remove (fromPos: number=0, toPos: number=this._value.length): ChangeDetails {\n    this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\n    if (!this._value) this._isRawInput = false;\n\n    return new ChangeDetails();\n  }\n\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE): number {\n    const minPos = 0;\n    const maxPos = this._value.length;\n\n    switch (direction) {\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT:\n        return minPos;\n      case DIRECTION.NONE:\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT:\n      default:\n        return maxPos;\n    }\n  }\n\n  totalInputPositions (fromPos: number=0, toPos: number=this._value.length): number {\n    return this._isRawInput ? (toPos - fromPos) : 0;\n  }\n\n  extractInput (fromPos: number=0, toPos: number=this._value.length, flags: ExtractFlags={}): string {\n    return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\n  }\n\n  get isComplete (): boolean {\n    return true;\n  }\n\n  get isFilled (): boolean {\n    return Boolean(this._value);\n  }\n\n  _appendChar (ch: string, flags: AppendFlags={}): ChangeDetails {\n    const details = new ChangeDetails();\n\n    if (this.isFilled) return details;\n    const appendEager = this.eager === true || this.eager === 'append';\n\n    const appended = this.char === ch;\n    const isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && (!flags.raw || !appendEager) && !flags.tail;\n    if (isResolved) details.rawInserted = this.char;\n    this._value = details.inserted = this.char;\n    this._isRawInput = isResolved && (flags.raw || flags.input);\n\n    return details;\n  }\n\n  _appendEager (): ChangeDetails {\n    return this._appendChar(this.char, { tail: true });\n  }\n\n  _appendPlaceholder (): ChangeDetails {\n    const details = new ChangeDetails();\n    if (this.isFilled) return details;\n\n    this._value = details.inserted = this.char;\n    return details;\n  }\n\n  extractTail (): TailDetails {\n    return new ContinuousTailDetails('');\n  }\n\n  appendTail (tail: string | String | TailDetails): ChangeDetails {\n    if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n\n    return (tail as TailDetails).appendTo(this);\n  }\n\n  append (str: string, flags?: AppendFlags, tail?: TailDetails): ChangeDetails {\n    const details = this._appendChar(str[0], flags);\n\n    if (tail != null) {\n      details.tailShift += this.appendTail(tail).tailShift;\n    }\n\n    return details;\n  }\n\n  doCommit () {}\n\n  get state (): MaskedState {\n    return {\n      _value: this._value,\n      _rawInputValue: this.rawInputValue,\n    };\n  }\n\n  set state (state: MaskedState) {\n    this._value = state._value;\n    this._isRawInput = Boolean(state._rawInputValue);\n  }\n}\n","import createMask, { type FactoryArg, type FactoryOpts, type FactoryReturnMasked } from '../factory';\nimport type Masked from '../base';\nimport type MaskedPattern from '../pattern';\nimport { type TailDetails } from '../../core/tail-details';\nimport { type ExtractFlags, type AppendFlags, type MaskedState } from '../base';\nimport ChangeDetails from '../../core/change-details';\nimport { DIRECTION, type Direction } from '../../core/utils';\nimport type PatternBlock from './block';\n\n\nexport\ntype PatternInputDefinitionOptions<Opts extends FactoryOpts> =\n  Omit<Opts,\n  | 'parent'\n  | 'isOptional'\n  | 'lazy'\n  | 'eager'\n  | 'placeholderChar'\n  | 'displayChar'> &\n  Partial<Pick<PatternInputDefinition,\n  | 'parent'\n  | 'isOptional'\n  | 'lazy'\n  | 'eager'\n  | 'placeholderChar'\n  | 'displayChar'\n>>;\n\nexport\ntype PatternInputDefinitionState<Opts extends FactoryArg> = MaskedState & {\n  masked: FactoryReturnMasked<Opts>['state'],\n  isFilled: boolean,\n};\n\n\nexport default\nclass PatternInputDefinition<Opts extends FactoryOpts=any> implements PatternBlock<PatternInputDefinitionState<Opts>> {\n  static DEFAULT_DEFINITIONS: { [k: string]: RegExp } = {\n    '0': /\\d/,\n    'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\n    '*': /./\n  }\n\n  /** */\n  declare readonly masked: FactoryReturnMasked<Opts>;\n  /** */\n  declare parent: Masked;\n  /** */\n  declare isOptional: boolean;\n  /** */\n  declare isFilled: boolean;\n  /** */\n  declare lazy: MaskedPattern['lazy'];\n  /** */\n  declare eager: MaskedPattern['eager'];\n  /** */\n  declare placeholderChar: MaskedPattern['placeholderChar'];\n  /** */\n  declare displayChar: MaskedPattern['displayChar'];\n\n  constructor(opts: PatternInputDefinitionOptions<Opts>) {\n    const { parent, isOptional, placeholderChar, displayChar, lazy, eager, ...maskOpts } = opts;\n\n    this.masked = createMask(maskOpts as Opts);\n    Object.assign(this, { parent, isOptional, placeholderChar, displayChar, lazy, eager });\n  }\n\n  reset () {\n    this.isFilled = false;\n    this.masked.reset();\n  }\n\n  remove (fromPos: number=0, toPos: number=this.value.length): ChangeDetails {\n    if (fromPos === 0 && toPos >= 1) {\n      this.isFilled = false;\n      return this.masked.remove(fromPos, toPos);\n    }\n\n    return new ChangeDetails();\n  }\n\n  get value (): string {\n    return this.masked.value ||\n      (this.isFilled && !this.isOptional ?\n        this.placeholderChar :\n        '');\n  }\n\n  get unmaskedValue (): string {\n    return this.masked.unmaskedValue;\n  }\n\n  get rawInputValue (): string {\n    return this.masked.rawInputValue;\n  }\n\n  get displayValue (): string {\n    return this.masked.value && this.displayChar || this.value;\n  }\n\n  get isComplete (): boolean {\n    return Boolean(this.masked.value) || this.isOptional;\n  }\n\n  _appendChar (ch: string, flags: AppendFlags<PatternInputDefinitionState<Opts>>={}): ChangeDetails {\n    if (this.isFilled) return new ChangeDetails();\n\n    const state = this.masked.state;\n    // simulate input\n    const details = this.masked._appendChar(ch, this.currentMaskFlags(flags));\n\n    if (details.inserted && this.doValidate(flags) === false) {\n      details.inserted = details.rawInserted = '';\n      this.masked.state = state;\n    }\n\n    if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\n      details.inserted = this.placeholderChar;\n    }\n    details.skip = !details.inserted && !this.isOptional;\n    this.isFilled = Boolean(details.inserted);\n\n    return details;\n  }\n\n  append (str: string, flags?: AppendFlags<PatternInputDefinitionState<Opts>>, tail?: TailDetails): ChangeDetails {\n    // TODO probably should be done via _appendChar\n    return this.masked.append(str, this.currentMaskFlags(flags), tail);\n  }\n\n  _appendPlaceholder (): ChangeDetails {\n    const details = new ChangeDetails();\n\n    if (this.isFilled || this.isOptional) return details;\n\n    this.isFilled = true;\n    details.inserted = this.placeholderChar;\n    return details;\n  }\n\n  _appendEager (): ChangeDetails {\n    return new ChangeDetails();\n  }\n\n  extractTail (fromPos?: number, toPos?: number): TailDetails {\n    return this.masked.extractTail(fromPos, toPos);\n  }\n\n  appendTail (tail: string | TailDetails): ChangeDetails {\n    return this.masked.appendTail(tail);\n  }\n\n  extractInput (fromPos: number=0, toPos: number=this.value.length, flags?: ExtractFlags): string {\n    return this.masked.extractInput(fromPos, toPos, flags);\n  }\n\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE): number {\n    const minPos = 0;\n    const maxPos = this.value.length;\n    const boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\n\n    switch (direction) {\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT:\n        return this.isComplete ? boundPos : minPos;\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT:\n        return this.isComplete ? boundPos : maxPos;\n      case DIRECTION.NONE:\n      default: return boundPos;\n    }\n  }\n\n  totalInputPositions (fromPos: number=0, toPos: number=this.value.length): number {\n    return this.value.slice(fromPos, toPos).length;\n  }\n\n  doValidate (flags: AppendFlags<PatternInputDefinitionState<Opts>>): boolean {\n    return this.masked.doValidate(this.currentMaskFlags(flags)) && (\n      !this.parent || this.parent.doValidate(this.currentMaskFlags(flags)));\n  }\n\n  doCommit () {\n    this.masked.doCommit();\n  }\n\n  get state (): PatternInputDefinitionState<Opts> {\n    return {\n      _value: this.value,\n      _rawInputValue: this.rawInputValue,\n      masked: this.masked.state,\n      isFilled: this.isFilled,\n    };\n  }\n\n  set state (state: PatternInputDefinitionState<Opts>) {\n    this.masked.state = state.masked;\n    this.isFilled = state.isFilled;\n  }\n\n  currentMaskFlags (flags?: AppendFlags<PatternInputDefinitionState<Opts>>): AppendFlags {\n    return {\n      ...flags,\n      _beforeTailState: flags?._beforeTailState?.masked || flags?._beforeTailState as unknown as MaskedState,\n    };\n  }\n}\n","import Masked, { type MaskedOptions } from './base';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedRegExpOptions = MaskedOptions<MaskedRegExp>;\n\n/** Masking by RegExp */\nexport default\nclass MaskedRegExp extends Masked<string> {\n  /** */\n  declare mask: RegExp;\n  /** Enable characters overwriting */\n  declare overwrite?: boolean | 'shift' | undefined;\n  /** */\n  declare eager?: boolean | 'remove' | 'append' | undefined;\n  /** */\n  declare skipInvalid?: boolean | undefined;\n\n  override updateOptions (opts: Partial<MaskedRegExpOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedRegExpOptions>) {\n    const mask = opts.mask;\n    if (mask) opts.validate = (value) => value.search(mask) >= 0;\n    super._update(opts);\n  }\n}\n\n\nIMask.MaskedRegExp = MaskedRegExp;\n","import ChangeDetails from '../core/change-details';\nimport IMask from '../core/holder';\nimport { type TailDetails } from '../core/tail-details';\nimport { DIRECTION, type Direction } from '../core/utils';\nimport Masked, { type AppendFlags, type ExtractFlags, type MaskedOptions, type MaskedState } from './base';\nimport createMask, { type FactoryArg, normalizeOpts, type ExtendFactoryArgOptions, NormalizedOpts } from './factory';\nimport type PatternBlock from './pattern/block';\nimport ChunksTailDetails from './pattern/chunk-tail-details';\nimport PatternCursor from './pattern/cursor';\nimport PatternFixedDefinition from './pattern/fixed-definition';\nimport PatternInputDefinition from './pattern/input-definition';\nimport './regexp'; // support for default definitions which are regexp's\n\n\nexport\ntype MaskedPatternOptions<\n  Value=string,\n  M extends MaskedPattern<Value>=MaskedPattern<Value>,\n  Props extends keyof M=never,\n> = MaskedOptions<M,\n  | 'definitions'\n  | 'blocks'\n  | 'placeholderChar'\n  | 'displayChar'\n  | 'lazy'\n  | Props\n>;\n\nexport\ntype Definitions = {\n  [k: string]: FactoryArg,\n};\n\nexport\ntype MaskedPatternState = MaskedState & {\n  _blocks: Array<MaskedState>,\n};\n\nexport\ntype BlockPosData = {\n  index: number,\n  offset: number,\n};\n\n\n/** Pattern mask */\nexport default\nclass MaskedPattern<Value=string> extends Masked<Value> {\n  static DEFAULTS: Record<string, any> = {\n    lazy: true,\n    placeholderChar: '_'\n  } satisfies Partial<MaskedPattern>;\n  static STOP_CHAR = '`';\n  static ESCAPE_CHAR = '\\\\';\n  static InputDefinition = PatternInputDefinition;\n  static FixedDefinition = PatternFixedDefinition;\n\n  declare mask: string;\n  /** */\n  declare blocks: { [key: string]: ExtendFactoryArgOptions<{ expose?: boolean }> };\n  /** */\n  declare definitions: Definitions;\n  /** Single char for empty input */\n  declare placeholderChar: string;\n  /** Single char for filled input */\n  declare displayChar: string;\n  /** Show placeholder only when needed */\n  declare lazy: boolean;\n  /** Enable characters overwriting */\n  declare overwrite?: boolean | 'shift' | undefined;\n  /** */\n  declare eager?: boolean | 'remove' | 'append' | undefined;\n  /** */\n  declare skipInvalid?: boolean | undefined;\n\n  declare _blocks: Array<PatternBlock>;\n  declare _maskedBlocks: {[key: string]: Array<number>};\n  declare _stops: Array<number>;\n  declare exposeBlock?: Masked;\n\n  constructor (opts: MaskedPatternOptions<Value>) {\n    super({\n      ...MaskedPattern.DEFAULTS,\n      ...opts,\n      definitions: Object.assign({}, PatternInputDefinition.DEFAULT_DEFINITIONS, opts?.definitions),\n    } as MaskedOptions);\n  }\n\n  override updateOptions (opts: Partial<MaskedPatternOptions<Value>>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedPatternOptions<Value>>) {\n    opts.definitions = Object.assign({}, this.definitions, opts.definitions);\n    super._update(opts);\n    this._rebuildMask();\n  }\n\n  _rebuildMask () {\n    const defs = this.definitions;\n    this._blocks = []; this.exposeBlock = undefined;\n    this._stops = [];\n    this._maskedBlocks = {};\n\n    const pattern = this.mask;\n    if (!pattern || !defs) return;\n\n    let unmaskingBlock = false;\n    let optionalBlock = false;\n\n    for (let i=0; i<pattern.length; ++i) {\n      if (this.blocks) {\n        const p = pattern.slice(i);\n        const bNames = Object.keys(this.blocks).filter(bName => p.indexOf(bName) === 0);\n        // order by key length\n        bNames.sort((a, b) => b.length - a.length);\n        // use block name with max length\n        const bName = bNames[0];\n        if (bName) {\n          const { expose, ...blockOpts } = normalizeOpts(this.blocks[bName]) as NormalizedOpts<FactoryArg> & { expose?: boolean };\n          const maskedBlock = createMask({\n            lazy: this.lazy,\n            eager: this.eager,\n            placeholderChar: this.placeholderChar,\n            displayChar: this.displayChar,\n            overwrite: this.overwrite,\n            ...blockOpts,\n            parent: this,\n          });\n\n          if (maskedBlock) {\n            this._blocks.push(maskedBlock);\n            if (expose) this.exposeBlock = maskedBlock;\n\n            // store block index\n            if (!this._maskedBlocks[bName]) this._maskedBlocks[bName] = [];\n            this._maskedBlocks[bName].push(this._blocks.length - 1);\n          }\n\n          i += bName.length - 1;\n          continue;\n        }\n      }\n\n      let char = pattern[i];\n      let isInput = char in defs;\n\n      if (char === MaskedPattern.STOP_CHAR) {\n        this._stops.push(this._blocks.length);\n        continue;\n      }\n\n      if (char === '{' || char === '}') {\n        unmaskingBlock = !unmaskingBlock;\n        continue;\n      }\n\n      if (char === '[' || char === ']') {\n        optionalBlock = !optionalBlock;\n        continue;\n      }\n\n      if (char === MaskedPattern.ESCAPE_CHAR) {\n        ++i;\n        char = pattern[i];\n        if (!char) break;\n        isInput = false;\n      }\n\n      const def = isInput ?\n        new PatternInputDefinition({\n          isOptional: optionalBlock,\n          lazy: this.lazy,\n          eager: this.eager,\n          placeholderChar: this.placeholderChar,\n          displayChar: this.displayChar,\n          ...normalizeOpts(defs[char]),\n          parent: this,\n        }) as PatternBlock :\n        new PatternFixedDefinition({\n          char,\n          eager: this.eager,\n          isUnmasking: unmaskingBlock,\n        });\n\n      this._blocks.push(def);\n    }\n  }\n\n  get state (): MaskedPatternState {\n    return {\n      ...super.state,\n      _blocks: this._blocks.map(b => b.state),\n    };\n  }\n\n  set state (state: MaskedPatternState) {\n    const {_blocks, ...maskedState} = state;\n    this._blocks.forEach((b, bi) => b.state = _blocks[bi]);\n    super.state = maskedState;\n  }\n\n  reset () {\n    super.reset();\n    this._blocks.forEach(b => b.reset());\n  }\n\n  get isComplete (): boolean {\n    return this.exposeBlock ? this.exposeBlock.isComplete :\n      this._blocks.every(b => b.isComplete);\n  }\n\n  get isFilled (): boolean {\n    return this._blocks.every(b => b.isFilled);\n  }\n\n  get isFixed (): boolean {\n    return this._blocks.every(b => b.isFixed);\n  }\n\n  get isOptional (): boolean {\n    return this._blocks.every(b => b.isOptional);\n  }\n\n  doCommit () {\n    this._blocks.forEach(b => b.doCommit());\n    super.doCommit();\n  }\n\n  get unmaskedValue (): string {\n    return this.exposeBlock ? this.exposeBlock.unmaskedValue :\n      this._blocks.reduce((str, b) => str += b.unmaskedValue, '');\n  }\n\n  set unmaskedValue (unmaskedValue: string) {\n    if (this.exposeBlock) {\n      const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);\n      this.exposeBlock.unmaskedValue = unmaskedValue;\n      this.appendTail(tail);\n      this.doCommit();\n    }\n    else super.unmaskedValue = unmaskedValue;\n  }\n\n  get value (): string {\n    return this.exposeBlock ? this.exposeBlock.value :\n      // TODO return _value when not in change?\n      this._blocks.reduce((str, b) => str += b.value, '');\n  }\n\n  set value (value: string) {\n    if (this.exposeBlock) {\n      const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);\n      this.exposeBlock.value = value;\n      this.appendTail(tail);\n      this.doCommit();\n    }\n    else super.value = value;\n  }\n\n  get typedValue (): Value {\n    return this.exposeBlock ? this.exposeBlock.typedValue :\n      super.typedValue;\n  }\n\n  set typedValue (value: Value) {\n    if (this.exposeBlock) {\n      const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);\n      this.exposeBlock.typedValue = value;\n      this.appendTail(tail);\n      this.doCommit();\n    }\n    else super.typedValue = value;\n  }\n\n  get displayValue (): string {\n    return this._blocks.reduce((str, b) => str += b.displayValue, '');\n  }\n\n  appendTail (tail: string | String | TailDetails): ChangeDetails {\n    return super.appendTail(tail).aggregate(this._appendPlaceholder());\n  }\n\n  _appendEager (): ChangeDetails {\n    const details = new ChangeDetails();\n\n    let startBlockIndex = this._mapPosToBlock(this.displayValue.length)?.index;\n    if (startBlockIndex == null) return details;\n\n    // TODO test if it works for nested pattern masks\n    if (this._blocks[startBlockIndex].isFilled) ++startBlockIndex;\n\n    for (let bi=startBlockIndex; bi<this._blocks.length; ++bi) {\n      const d = this._blocks[bi]._appendEager();\n      if (!d.inserted) break;\n\n      details.aggregate(d);\n    }\n\n    return details;\n  }\n\n  _appendCharRaw (ch: string, flags: AppendFlags<MaskedPatternState>={}): ChangeDetails {\n    const blockIter = this._mapPosToBlock(this.displayValue.length);\n    const details = new ChangeDetails();\n    if (!blockIter) return details;\n\n    for (let bi=blockIter.index; ; ++bi) {\n      const block = this._blocks[bi];\n      if (!block) break;\n\n      const blockDetails = block._appendChar(ch, { ...flags, _beforeTailState: flags._beforeTailState?._blocks?.[bi] });\n\n      const skip = blockDetails.skip;\n      details.aggregate(blockDetails);\n\n      if (skip || blockDetails.rawInserted) break; // go next char\n    }\n\n    return details;\n  }\n\n  extractTail (fromPos: number=0, toPos: number=this.displayValue.length): ChunksTailDetails {\n    const chunkTail = new ChunksTailDetails();\n    if (fromPos === toPos) return chunkTail;\n\n    this._forEachBlocksInRange(fromPos, toPos, (b, bi, bFromPos, bToPos) => {\n      const blockChunk = b.extractTail(bFromPos, bToPos);\n      blockChunk.stop = this._findStopBefore(bi);\n      blockChunk.from = this._blockStartPos(bi);\n      if (blockChunk instanceof ChunksTailDetails) blockChunk.blockIndex = bi;\n\n      chunkTail.extend(blockChunk);\n    });\n\n    return chunkTail;\n  }\n\n  extractInput (fromPos: number=0, toPos: number=this.displayValue.length, flags: ExtractFlags={}): string {\n    if (fromPos === toPos) return '';\n\n    let input = '';\n\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, fromPos, toPos) => {\n      input += b.extractInput(fromPos, toPos, flags);\n    });\n\n    return input;\n  }\n\n  _findStopBefore (blockIndex: number): number | undefined {\n    let stopBefore;\n    for (let si=0; si<this._stops.length; ++si) {\n      const stop = this._stops[si];\n      if (stop <= blockIndex) stopBefore = stop;\n      else break;\n    }\n    return stopBefore;\n  }\n\n  /** Appends placeholder depending on laziness */\n  _appendPlaceholder (toBlockIndex?: number): ChangeDetails {\n    const details = new ChangeDetails();\n    if (this.lazy && toBlockIndex == null) return details;\n\n    const startBlockIter = this._mapPosToBlock(this.displayValue.length);\n    if (!startBlockIter) return details;\n\n    const startBlockIndex = startBlockIter.index;\n    const endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\n\n    this._blocks.slice(startBlockIndex, endBlockIndex)\n      .forEach(b => {\n        if (!b.lazy || toBlockIndex != null) {\n          const bDetails = b._appendPlaceholder((b as MaskedPattern)._blocks?.length);\n          this._value += bDetails.inserted;\n          details.aggregate(bDetails);\n        }\n      });\n\n    return details;\n  }\n\n  /** Finds block in pos */\n  _mapPosToBlock (pos: number): BlockPosData | undefined {\n    let accVal = '';\n    for (let bi=0; bi<this._blocks.length; ++bi) {\n      const block = this._blocks[bi];\n      const blockStartPos = accVal.length;\n\n      accVal += block.displayValue;\n\n      if (pos <= accVal.length) {\n        return {\n          index: bi,\n          offset: pos - blockStartPos,\n        };\n      }\n    }\n  }\n\n  _blockStartPos (blockIndex: number): number {\n    return this._blocks\n      .slice(0, blockIndex)\n      .reduce((pos, b) => pos += b.displayValue.length, 0);\n  }\n\n  _forEachBlocksInRange (fromPos: number, toPos: number=this.displayValue.length, fn: (block: PatternBlock, blockIndex: number, fromPos: number, toPos: number) => void) {\n    const fromBlockIter = this._mapPosToBlock(fromPos);\n\n    if (fromBlockIter) {\n      const toBlockIter = this._mapPosToBlock(toPos);\n      // process first block\n      const isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;\n      const fromBlockStartPos = fromBlockIter.offset;\n      const fromBlockEndPos = toBlockIter && isSameBlock ?\n        toBlockIter.offset :\n        this._blocks[fromBlockIter.index].displayValue.length;\n      fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);\n\n      if (toBlockIter && !isSameBlock) {\n        // process intermediate blocks\n        for (let bi=fromBlockIter.index+1; bi<toBlockIter.index; ++bi) {\n          fn(this._blocks[bi], bi, 0, this._blocks[bi].displayValue.length);\n        }\n\n        // process last block\n        fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);\n      }\n    }\n  }\n\n  remove (fromPos: number=0, toPos: number=this.displayValue.length): ChangeDetails {\n    const removeDetails = super.remove(fromPos, toPos);\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {\n      removeDetails.aggregate(b.remove(bFromPos, bToPos));\n    });\n    return removeDetails;\n  }\n\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE): number {\n    if (!this._blocks.length) return 0;\n    const cursor = new PatternCursor(this, cursorPos);\n\n    if (direction === DIRECTION.NONE) {\n      // -------------------------------------------------\n      // NONE should only go out from fixed to the right!\n      // -------------------------------------------------\n      if (cursor.pushRightBeforeInput()) return cursor.pos;\n      cursor.popState();\n      if (cursor.pushLeftBeforeInput()) return cursor.pos;\n      return this.displayValue.length;\n    }\n\n    // FORCE is only about a|* otherwise is 0\n    if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\n      // try to break fast when *|a\n      if (direction === DIRECTION.LEFT) {\n        cursor.pushRightBeforeFilled();\n        if (cursor.ok && cursor.pos === cursorPos) return cursorPos;\n        cursor.popState();\n      }\n\n      // forward flow\n      cursor.pushLeftBeforeInput();\n      cursor.pushLeftBeforeRequired();\n      cursor.pushLeftBeforeFilled();\n\n      // backward flow\n      if (direction === DIRECTION.LEFT) {\n        cursor.pushRightBeforeInput();\n        cursor.pushRightBeforeRequired();\n        if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\n        cursor.popState();\n        if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\n        cursor.popState();\n      }\n      if (cursor.ok) return cursor.pos;\n      if (direction === DIRECTION.FORCE_LEFT) return 0;\n\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n\n      return 0;\n    }\n\n    if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\n      // forward flow\n      cursor.pushRightBeforeInput();\n      cursor.pushRightBeforeRequired();\n\n      if (cursor.pushRightBeforeFilled()) return cursor.pos;\n      if (direction === DIRECTION.FORCE_RIGHT) return this.displayValue.length;\n\n      // backward flow\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n\n      return this.nearestInputPos(cursorPos, DIRECTION.LEFT);\n    }\n\n    return cursorPos;\n  }\n\n  totalInputPositions (fromPos: number=0, toPos: number=this.displayValue.length): number {\n    let total = 0;\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {\n      total += b.totalInputPositions(bFromPos, bToPos);\n    });\n    return total;\n  }\n\n  /** Get block by name */\n  maskedBlock (name: string): PatternBlock | undefined {\n    return this.maskedBlocks(name)[0];\n  }\n\n  /** Get all blocks by name */\n  maskedBlocks (name: string): Array<PatternBlock> {\n    const indices = this._maskedBlocks[name];\n    if (!indices) return [];\n    return indices.map(gi => this._blocks[gi]);\n  }\n}\n\n\nIMask.MaskedPattern = MaskedPattern;\n","import ChangeDetails from '../core/change-details';\nimport IMask from '../core/holder';\nimport { type AppendFlags } from './base';\nimport MaskedPattern, { type MaskedPatternOptions } from './pattern';\n\n\ntype MaskedRangePatternOptions = MaskedPatternOptions &\n  Pick<MaskedRange, 'from' | 'to' | 'autofix'> &\n  Partial<Pick<MaskedRange, 'maxLength'>>;\n\nexport\ntype MaskedRangeOptions = Omit<MaskedRangePatternOptions, 'mask'>;\n\n\n/** Pattern which accepts ranges */\nexport default\nclass MaskedRange extends MaskedPattern {\n  /**\n    Optionally sets max length of pattern.\n    Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\n  */\n  declare maxLength: number;\n  /** Min bound */\n  declare from: number;\n  /** Max bound */\n  declare to: number;\n  /** */\n  declare autofix?: boolean | 'pad';\n\n  get _matchFrom (): number {\n    return this.maxLength - String(this.from).length;\n  }\n\n  constructor (opts?: MaskedRangeOptions) {\n    super(opts as MaskedPatternOptions); // mask will be created in _update\n  }\n\n  override updateOptions (opts: Partial<MaskedRangeOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedRangeOptions>) {\n    const {\n      to=this.to || 0,\n      from=this.from || 0,\n      maxLength=this.maxLength || 0,\n      autofix=this.autofix,\n      ...patternOpts\n    }: Partial<MaskedRangePatternOptions> = opts;\n\n    this.to = to;\n    this.from = from;\n    this.maxLength = Math.max(String(to).length, maxLength);\n    this.autofix = autofix;\n\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n    let sameCharsCount = 0;\n    while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) ++sameCharsCount;\n    patternOpts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(this.maxLength - sameCharsCount);\n\n    super._update(patternOpts);\n  }\n\n  override get isComplete (): boolean {\n    return super.isComplete && Boolean(this.value);\n  }\n\n  boundaries (str: string): [string, string] {\n    let minstr = '';\n    let maxstr = '';\n\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/) || [];\n    if (num) {\n      minstr = '0'.repeat(placeholder.length) + num;\n      maxstr = '9'.repeat(placeholder.length) + num;\n    }\n    minstr = minstr.padEnd(this.maxLength, '0');\n    maxstr = maxstr.padEnd(this.maxLength, '9');\n\n    return [minstr, maxstr];\n  }\n\n  override doPrepareChar (ch: string, flags: AppendFlags={}): [string, ChangeDetails] {\n    let details: ChangeDetails;\n    [ch, details] = super.doPrepareChar(ch.replace(/\\D/g, ''), flags);\n\n    if (!this.autofix || !ch) return [ch, details];\n\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n\n    const nextVal = this.value + ch;\n    if (nextVal.length > this.maxLength) return ['', details];\n\n    const [minstr, maxstr] = this.boundaries(nextVal);\n\n    if (Number(maxstr) < this.from) return [fromStr[nextVal.length - 1], details];\n\n    if (Number(minstr) > this.to) {\n      if (this.autofix === 'pad' && nextVal.length < this.maxLength) {\n        return ['', details.aggregate(this.append(fromStr[nextVal.length - 1]+ch, flags))];\n      }\n      return [toStr[nextVal.length - 1], details];\n    }\n\n    return [ch, details];\n  }\n\n  override doValidate (flags: AppendFlags): boolean {\n    const str = this.value;\n\n    const firstNonZero = str.search(/[^0]/);\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n\n    const [minstr, maxstr] = this.boundaries(str);\n\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to &&\n      super.doValidate(flags);\n  }\n}\n\n\nIMask.MaskedRange = MaskedRange;\n","import MaskedPattern, { type MaskedPatternOptions } from './pattern';\nimport { type MaskedRangeOptions } from './range';\nimport MaskedRange from './range';\nimport IMask from '../core/holder';\nimport type Masked from './base';\nimport { type AppendFlags } from './base';\nimport { isString } from '../core/utils';\n\n\nexport\ntype DateMaskType = DateConstructor;\n\ntype DateOptionsKeys =\n  | 'pattern'\n  | 'min'\n  | 'max'\n  | 'autofix'\n;\n\nexport\ntype DateValue = Date | null;\n\nexport\ntype MaskedDateOptions =\n  Omit<MaskedPatternOptions<DateValue>, 'mask'> &\n  Partial<Pick<MaskedDate, DateOptionsKeys>> &\n  { mask?: string | DateMaskType }\n;\n\n/** Date mask */\nexport default\nclass MaskedDate extends MaskedPattern<DateValue> {\n  static GET_DEFAULT_BLOCKS: () => { [k: string]: MaskedRangeOptions } = () => ({\n    d: {\n      mask: MaskedRange,\n      from: 1,\n      to: 31,\n      maxLength: 2,\n    },\n    m: {\n      mask: MaskedRange,\n      from: 1,\n      to: 12,\n      maxLength: 2,\n    },\n    Y: {\n      mask: MaskedRange,\n      from: 1900,\n      to: 9999,\n    }\n  });\n  static DEFAULTS: Record<string, any> = {\n    mask: Date,\n    pattern: 'd{.}`m{.}`Y',\n    format: (date: DateValue, masked: Masked): string => {\n      if (!date) return '';\n\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n\n      return [day, month, year].join('.');\n    },\n    parse: (str: string, masked: Masked): DateValue => {\n      const [day, month, year] = str.split('.').map(Number);\n      return new Date(year, month - 1, day);\n    },\n  } satisfies Partial<MaskedDateOptions>;\n\n  /** Pattern mask for date according to {@link MaskedDate#format} */\n  declare pattern: string;\n  /** Start date */\n  declare min?: Date;\n  /** End date */\n  declare max?: Date;\n  /** */\n  declare autofix?: boolean | 'pad' | undefined;\n  /** Format typed value to string */\n  declare format: (value: DateValue, masked: Masked) => string;\n  /** Parse string to get typed value */\n  declare parse: (str: string, masked: Masked) => DateValue;\n\n  constructor (opts?: MaskedDateOptions) {\n    const { mask, pattern, ...patternOpts } = {\n      ...(MaskedDate.DEFAULTS as MaskedDateOptions),\n      ...opts,\n    };\n\n    super({\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern,\n    });\n  }\n\n  override updateOptions (opts: Partial<MaskedDateOptions>) {\n    super.updateOptions(opts as Partial<MaskedPatternOptions<DateValue>>);\n  }\n\n  override _update (opts: Partial<MaskedDateOptions>) {\n    const { mask, pattern, blocks, ...patternOpts } = {\n      ...MaskedDate.DEFAULTS,\n      ...opts,\n    };\n\n    const patternBlocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS());\n    // adjust year block\n    if (opts.min) patternBlocks.Y.from = opts.min.getFullYear();\n    if (opts.max) patternBlocks.Y.to = opts.max.getFullYear();\n    if (opts.min && opts.max && patternBlocks.Y.from === patternBlocks.Y.to\n    ) {\n      patternBlocks.m.from = opts.min.getMonth() + 1;\n      patternBlocks.m.to = opts.max.getMonth() + 1;\n\n      if (patternBlocks.m.from === patternBlocks.m.to) {\n        patternBlocks.d.from = opts.min.getDate();\n        patternBlocks.d.to = opts.max.getDate();\n      }\n    }\n    Object.assign(patternBlocks, this.blocks, blocks);\n\n    // add autofix\n    Object.keys(patternBlocks).forEach(bk => {\n      const b = patternBlocks[bk];\n      if (!('autofix' in b) && 'autofix' in opts) b.autofix = opts.autofix;\n    });\n\n    super._update({\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern,\n      blocks: patternBlocks,\n    });\n  }\n\n  override doValidate (flags: AppendFlags): boolean {\n    const date = this.date;\n\n    return super.doValidate(flags) &&\n      (!this.isComplete ||\n        this.isDateExist(this.value) && date != null &&\n        (this.min == null || this.min <= date) &&\n        (this.max == null || date <= this.max));\n  }\n\n  /** Checks if date is exists */\n  isDateExist (str: string): boolean {\n    return this.format(this.parse(str, this), this).indexOf(str) >= 0;\n  }\n\n  /** Parsed Date */\n  get date (): DateValue {\n    return this.typedValue;\n  }\n  set date (date: DateValue) {\n    this.typedValue = date;\n  }\n\n  override get typedValue (): DateValue {\n    return this.isComplete ? super.typedValue : null;\n  }\n  override set typedValue (value: DateValue) {\n    super.typedValue = value;\n  }\n\n  override maskEquals (mask: any): boolean {\n    return mask === Date || super.maskEquals(mask);\n  }\n}\n\n\nIMask.MaskedDate = MaskedDate;\n","import { objectIncludes } from '../core/utils';\nimport ChangeDetails from '../core/change-details';\nimport createMask, { type FactoryArg, type ExtendFactoryArgOptions, type NormalizedOpts, normalizeOpts } from './factory';\nimport Masked, { type AppendFlags, type MaskedState, type MaskedOptions, type ExtractFlags } from './base';\nimport { DIRECTION, type Direction } from '../core/utils';\nimport { type TailDetails } from '../core/tail-details';\nimport IMask from '../core/holder';\n\n\ntype MaskedDynamicNoRefState = MaskedState & {\n  compiledMasks: Array<MaskedState>\n};\n\ntype MaskedDynamicRefState = MaskedDynamicNoRefState & {\n  currentMaskRef: Masked,\n  currentMask: MaskedState,\n};\n\nexport\ntype MaskedDynamicState = MaskedDynamicNoRefState | MaskedDynamicRefState;\n\nexport\ntype DynamicMaskType = Array<ExtendFactoryArgOptions<{ expose?: boolean }>> | ArrayConstructor;\n\nexport\ntype MaskedDynamicOptions = MaskedOptions<MaskedDynamic, 'dispatch'>;\n\ntype HandleState = MaskedDynamicState | MaskedState;\n\n/** Dynamic mask for choosing appropriate mask in run-time */\nexport default\nclass MaskedDynamic<Value=any> extends Masked<Value> {\n  static DEFAULTS: Partial<MaskedDynamicOptions>;\n\n  declare mask: DynamicMaskType;\n  /** Currently chosen mask */\n  declare currentMask?: Masked;\n  /** Currently chosen mask */\n  declare exposeMask?: Masked;\n  /** Compliled {@link Masked} options */\n  declare compiledMasks: Array<Masked>;\n  /** Chooses {@link Masked} depending on input value */\n  declare dispatch: (appended: string, masked: MaskedDynamic, flags: AppendFlags<HandleState>, tail: string | String | TailDetails) => (Masked | undefined);\n\n  declare _overwrite?: this['overwrite'];\n  declare _eager?: this['eager'];\n  declare _skipInvalid?: this['skipInvalid'];\n\n  constructor (opts?: MaskedDynamicOptions) {\n    super({\n      ...MaskedDynamic.DEFAULTS,\n      ...opts\n    });\n\n    this.currentMask = undefined;\n  }\n\n  override updateOptions (opts: Partial<MaskedDynamicOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedDynamicOptions>) {\n    super._update(opts);\n\n    if ('mask' in opts) {\n      this.exposeMask = undefined;\n      // mask could be totally dynamic with only `dispatch` option\n      this.compiledMasks = Array.isArray(opts.mask) ?\n        opts.mask.map(m => {\n          const { expose, ...maskOpts } = normalizeOpts(m) as NormalizedOpts<FactoryArg> & { expose?: boolean };\n\n          const masked = createMask({\n            overwrite: this._overwrite,\n            eager: this._eager,\n            skipInvalid: this._skipInvalid,\n            ...maskOpts,\n          });\n\n          if (expose) this.exposeMask = masked;\n\n          return masked;\n        }) :\n        [];\n\n      // this.currentMask = this.doDispatch(''); // probably not needed but lets see\n    }\n  }\n\n  override _appendCharRaw (ch: string, flags: AppendFlags<HandleState>={}): ChangeDetails {\n    const details = this._applyDispatch(ch, flags);\n\n    if (this.currentMask) {\n      details.aggregate(this.currentMask._appendChar(ch, this.currentMaskFlags(flags)));\n    }\n\n    return details;\n  }\n\n  _applyDispatch (appended: string='', flags: AppendFlags<HandleState>={}, tail: string | String | TailDetails = ''): ChangeDetails {\n    const prevValueBeforeTail = flags.tail && flags._beforeTailState != null ?\n      flags._beforeTailState._value :\n      this.value;\n    const inputValue = this.rawInputValue;\n    const insertValue = flags.tail && flags._beforeTailState != null ?\n      flags._beforeTailState._rawInputValue :\n      inputValue;\n    const tailValue = inputValue.slice(insertValue.length);\n    const prevMask = this.currentMask;\n    const details = new ChangeDetails();\n\n    const prevMaskState = prevMask?.state;\n\n    // clone flags to prevent overwriting `_beforeTailState`\n    this.currentMask = this.doDispatch(appended, { ...flags }, tail);\n\n    // restore state after dispatch\n    if (this.currentMask) {\n      if (this.currentMask !== prevMask) {\n        // if mask changed reapply input\n        this.currentMask.reset();\n\n        if (insertValue) {\n          const d = this.currentMask.append(insertValue, {raw: true});\n          details.tailShift = d.inserted.length - prevValueBeforeTail.length;\n        }\n\n        if (tailValue) {\n          details.tailShift += this.currentMask.append(tailValue, {raw: true, tail: true}).tailShift;\n        }\n      } else if (prevMaskState) {\n        // Dispatch can do something bad with state, so\n        // restore prev mask state\n        this.currentMask.state = prevMaskState;\n      }\n    }\n\n    return details;\n  }\n\n  override _appendPlaceholder (): ChangeDetails {\n    const details = this._applyDispatch();\n\n    if (this.currentMask) {\n      details.aggregate(this.currentMask._appendPlaceholder());\n    }\n\n    return details;\n  }\n\n  override _appendEager (): ChangeDetails {\n    const details = this._applyDispatch();\n\n    if (this.currentMask) {\n      details.aggregate(this.currentMask._appendEager());\n    }\n\n    return details;\n  }\n\n  override appendTail (tail: string | String | TailDetails): ChangeDetails {\n    const details = new ChangeDetails();\n    if (tail) details.aggregate(this._applyDispatch('', {}, tail));\n\n    return details.aggregate(this.currentMask ?\n      this.currentMask.appendTail(tail) :\n      super.appendTail(tail));\n  }\n\n  currentMaskFlags (flags: AppendFlags<HandleState>): AppendFlags {\n    return {\n      ...flags,\n      _beforeTailState:\n        (flags._beforeTailState as MaskedDynamicRefState)?.currentMaskRef === this.currentMask &&\n        (flags._beforeTailState as MaskedDynamicRefState)?.currentMask ||\n        flags._beforeTailState,\n    };\n  }\n\n  doDispatch(appended: string, flags: AppendFlags<HandleState>={}, tail: string | String | TailDetails=''): Masked | undefined {\n    return this.dispatch(appended, this, flags, tail);\n  }\n\n  override doValidate (flags: AppendFlags<HandleState>): boolean {\n    return super.doValidate(flags) && (\n      !this.currentMask || this.currentMask.doValidate(this.currentMaskFlags(flags))\n    );\n  }\n\n  override doPrepare (str: string, flags: AppendFlags<HandleState>={}): [string, ChangeDetails] {\n    let [s, details] = super.doPrepare(str, flags);\n\n    if (this.currentMask) {\n      let currentDetails;\n      ([s, currentDetails] = super.doPrepare(s, this.currentMaskFlags(flags)));\n      details = details.aggregate(currentDetails);\n    }\n\n    return [s, details];\n  }\n\n  override doPrepareChar (str: string, flags: AppendFlags<HandleState>={}): [string, ChangeDetails] {\n    let [s, details] = super.doPrepareChar(str, flags);\n\n    if (this.currentMask) {\n      let currentDetails;\n      ([s, currentDetails] = super.doPrepareChar(s, this.currentMaskFlags(flags)));\n      details = details.aggregate(currentDetails);\n    }\n\n    return [s, details];\n  }\n\n  override reset () {\n    this.currentMask?.reset();\n    this.compiledMasks.forEach(m => m.reset());\n  }\n\n  override get value (): string {\n    return this.exposeMask ? this.exposeMask.value :\n      this.currentMask ? this.currentMask.value :\n      '';\n  }\n\n  override set value (value: string) {\n    if (this.exposeMask) {\n      this.exposeMask.value = value;\n      this.currentMask = this.exposeMask;\n      this._applyDispatch();\n    }\n    else super.value = value;\n  }\n\n  override get unmaskedValue (): string {\n    return this.exposeMask ? this.exposeMask.unmaskedValue :\n      this.currentMask ? this.currentMask.unmaskedValue :\n      '';\n  }\n\n  override set unmaskedValue (unmaskedValue: string) {\n    if (this.exposeMask) {\n      this.exposeMask.unmaskedValue = unmaskedValue;\n      this.currentMask = this.exposeMask;\n      this._applyDispatch();\n    }\n    else super.unmaskedValue = unmaskedValue;\n  }\n\n  override get typedValue (): Value {\n    return this.exposeMask ? this.exposeMask.typedValue :\n      this.currentMask ? this.currentMask.typedValue :\n      '';\n  }\n\n  override set typedValue (typedValue: Value) {\n    if (this.exposeMask) {\n      this.exposeMask.typedValue = typedValue;\n      this.currentMask = this.exposeMask;\n      this._applyDispatch();\n      return;\n    }\n\n    let unmaskedValue = String(typedValue);\n\n    // double check it\n    if (this.currentMask) {\n      this.currentMask.typedValue = typedValue;\n      unmaskedValue = this.currentMask.unmaskedValue;\n    }\n    this.unmaskedValue = unmaskedValue;\n  }\n\n  override get displayValue (): string {\n    return this.currentMask ? this.currentMask.displayValue : '';\n  }\n\n  override get isComplete (): boolean {\n    return Boolean(this.currentMask?.isComplete);\n  }\n\n  override get isFilled (): boolean {\n    return Boolean(this.currentMask?.isFilled);\n  }\n\n  override remove (fromPos?: number, toPos?: number): ChangeDetails {\n    const details: ChangeDetails = new ChangeDetails();\n    if (this.currentMask) {\n      details.aggregate(this.currentMask.remove(fromPos, toPos))\n        // update with dispatch\n        .aggregate(this._applyDispatch());\n    }\n\n    return details;\n  }\n\n  override get state (): MaskedDynamicState {\n    return {\n      ...super.state,\n      _rawInputValue: this.rawInputValue,\n      compiledMasks: this.compiledMasks.map(m => m.state),\n      currentMaskRef: this.currentMask,\n      currentMask: this.currentMask?.state,\n    };\n  }\n\n  override set state (state: HandleState) {\n    const { compiledMasks, currentMaskRef, currentMask, ...maskedState } = state as MaskedDynamicRefState;\n    if (compiledMasks) this.compiledMasks.forEach((m, mi) => m.state = compiledMasks[mi]);\n    if (currentMaskRef != null) {\n      this.currentMask = currentMaskRef;\n      this.currentMask.state = currentMask;\n    }\n    super.state = maskedState;\n  }\n\n  override extractInput (fromPos?: number, toPos?: number, flags?: ExtractFlags): string {\n    return this.currentMask ?\n      this.currentMask.extractInput(fromPos, toPos, flags) :\n      '';\n  }\n\n  override extractTail (fromPos?: number, toPos?: number): TailDetails {\n    return this.currentMask ?\n      this.currentMask.extractTail(fromPos, toPos) :\n      super.extractTail(fromPos, toPos);\n  }\n\n  override doCommit () {\n    if (this.currentMask) this.currentMask.doCommit();\n    super.doCommit();\n  }\n\n  override nearestInputPos(cursorPos: number, direction?: Direction): number {\n    return this.currentMask ?\n      this.currentMask.nearestInputPos(cursorPos, direction) :\n      super.nearestInputPos(cursorPos, direction);\n  }\n\n  override get overwrite (): boolean | 'shift' | undefined {\n    return this.currentMask ?\n      this.currentMask.overwrite :\n      this._overwrite;\n  }\n\n  override set overwrite (overwrite: boolean | 'shift' | undefined) {\n    this._overwrite = overwrite;\n  }\n\n  override get eager (): boolean | 'remove' | 'append' | undefined {\n    return this.currentMask ?\n      this.currentMask.eager :\n      this._eager;\n  }\n\n  override set eager (eager: boolean | 'remove' | 'append' | undefined) {\n    this._eager = eager;\n  }\n\n  override get skipInvalid (): boolean | undefined {\n    return this.currentMask ?\n      this.currentMask.skipInvalid :\n      this._skipInvalid;\n  }\n\n  override set skipInvalid (skipInvalid: boolean | undefined) {\n    this._skipInvalid = skipInvalid;\n  }\n\n  override maskEquals (mask: any): boolean {\n    return Array.isArray(mask) ?\n      this.compiledMasks.every((m, mi) => {\n        if (!mask[mi]) return;\n\n        const { mask: oldMask, ...restOpts } = mask[mi];\n        return objectIncludes(m, restOpts) && m.maskEquals(oldMask);\n      }) : super.maskEquals(mask);\n  }\n\n  override typedValueEquals (value: any): boolean {\n    return Boolean(this.currentMask?.typedValueEquals(value));\n  }\n}\n\nMaskedDynamic.DEFAULTS = {\n  dispatch: (appended, masked, flags, tail) => {\n    if (!masked.compiledMasks.length) return;\n\n    const inputValue = masked.rawInputValue;\n\n    // simulate input\n    const inputs = masked.compiledMasks.map((m, index) => {\n      const isCurrent = masked.currentMask === m;\n      const startInputPos = isCurrent ? m.displayValue.length : m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT);\n\n      if (m.rawInputValue !== inputValue) {\n        m.reset();\n        m.append(inputValue, { raw: true });\n      } else if (!isCurrent) {\n        m.remove(startInputPos);\n      }\n      m.append(appended, masked.currentMaskFlags(flags));\n      m.appendTail(tail);\n\n      return {\n        index,\n        weight: m.rawInputValue.length,\n        totalInputPositions: m.totalInputPositions(\n          0,\n          Math.max(startInputPos, m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT)),\n        ),\n      };\n    });\n\n    // pop masks with longer values first\n    inputs.sort((i1, i2) => i2.weight - i1.weight || i2.totalInputPositions - i1.totalInputPositions);\n\n    return masked.compiledMasks[inputs[0].index];\n  }\n};\n\n\nIMask.MaskedDynamic = MaskedDynamic;\n","import MaskedPattern, { type MaskedPatternOptions } from './pattern';\nimport { AppendFlags } from './base';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedEnumOptions = Omit<MaskedPatternOptions, 'mask'> & Pick<MaskedEnum, 'enum'>;\n\nexport\ntype MaskedEnumPatternOptions = MaskedPatternOptions & Partial<Pick<MaskedEnum, 'enum'>>;\n\n\n/** Pattern which validates enum values */\nexport default\nclass MaskedEnum extends MaskedPattern {\n  declare enum: Array<string>;\n\n  constructor (opts?: MaskedEnumOptions) {\n    super(opts as MaskedPatternOptions); // mask will be created in _update\n  }\n\n  override updateOptions (opts: Partial<MaskedEnumOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedEnumOptions>) {\n    const { enum: _enum, ...eopts }: MaskedEnumPatternOptions = opts;\n\n    if (_enum) {\n      const lengths = _enum.map(e => e.length);\n      const requiredLength = Math.min(...lengths);\n      const optionalLength = Math.max(...lengths) - requiredLength;\n\n      eopts.mask = '*'.repeat(requiredLength);\n      if (optionalLength) eopts.mask += '[' + '*'.repeat(optionalLength) + ']';\n\n      this.enum = _enum;\n    }\n\n    super._update(eopts);\n  }\n\n  override doValidate (flags: AppendFlags): boolean {\n    return this.enum.some(e => e.indexOf(this.unmaskedValue) === 0) &&\n      super.doValidate(flags);\n  }\n}\n\n\nIMask.MaskedEnum = MaskedEnum;\n","import Masked, { type MaskedOptions } from './base';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedFunctionOptions = MaskedOptions<MaskedFunction>;\n\n/** Masking by custom Function */\nexport default\nclass MaskedFunction<Value=any> extends Masked<Value> {\n  /** */\n  declare mask: (value: string, masked: Masked) => boolean;\n  /** Enable characters overwriting */\n  declare overwrite?: boolean | 'shift' | undefined;\n  /** */\n  declare eager?: boolean | 'remove' | 'append' | undefined;\n  /** */\n  declare skipInvalid?: boolean | undefined;\n\n  override updateOptions (opts: Partial<MaskedFunctionOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedFunctionOptions>) {\n    super._update({\n      ...opts,\n      validate: opts.mask,\n    });\n  }\n}\n\n\nIMask.MaskedFunction = MaskedFunction;\n","import { escapeRegExp, type Direction, DIRECTION } from '../core/utils';\nimport ChangeDetails from '../core/change-details';\nimport { type TailDetails } from '../core/tail-details';\n\nimport Masked, { type MaskedOptions, type ExtractFlags, type AppendFlags } from './base';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedNumberOptions = MaskedOptions<MaskedNumber,\n  | 'radix'\n  | 'thousandsSeparator'\n  | 'mapToRadix'\n  | 'scale'\n  | 'min'\n  | 'max'\n  | 'normalizeZeros'\n  | 'padFractionalZeros'\n>;\n\n/** Number mask */\nexport default\nclass MaskedNumber extends Masked<number> {\n  static UNMASKED_RADIX = '.';\n  static EMPTY_VALUES: Array<null | undefined | string | number> = [...Masked.EMPTY_VALUES, 0];\n  static DEFAULTS: Partial<MaskedNumberOptions> = {\n    mask: Number,\n    radix: ',',\n    thousandsSeparator: '',\n    mapToRadix: [MaskedNumber.UNMASKED_RADIX],\n    min: Number.MIN_SAFE_INTEGER,\n    max: Number.MAX_SAFE_INTEGER,\n    scale: 2,\n    normalizeZeros: true,\n    padFractionalZeros: false,\n    parse: Number,\n    format: (n: number) => n.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 }),\n  };\n\n  declare mask: NumberConstructor;\n  /** Single char */\n  declare radix: string;\n  /** Single char */\n  declare thousandsSeparator: string;\n  /** Array of single chars */\n  declare mapToRadix: Array<string>;\n  /** */\n  declare min: number;\n  /** */\n  declare max: number;\n  /** Digits after point */\n  declare scale: number;\n  /** Flag to remove leading and trailing zeros in the end of editing */\n  declare normalizeZeros: boolean;\n  /** Flag to pad trailing zeros after point in the end of editing */\n  declare padFractionalZeros: boolean;\n  /** Enable characters overwriting */\n  declare overwrite?: boolean | 'shift' | undefined;\n  /** */\n  declare eager?: boolean | 'remove' | 'append' | undefined;\n  /** */\n  declare skipInvalid?: boolean | undefined;\n  /** Format typed value to string */\n  declare format: (value: number, masked: Masked) => string;\n  /** Parse string to get typed value */\n  declare parse: (str: string, masked: Masked) => number;\n\n  declare _numberRegExp: RegExp;\n  declare _thousandsSeparatorRegExp: RegExp;\n  declare _mapToRadixRegExp: RegExp;\n  declare _separatorsProcessed: boolean;\n\n  constructor (opts?: MaskedNumberOptions) {\n    super({\n      ...MaskedNumber.DEFAULTS,\n      ...opts,\n    });\n  }\n\n  override updateOptions (opts: Partial<MaskedNumberOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedNumberOptions>) {\n    super._update(opts);\n    this._updateRegExps();\n  }\n\n  _updateRegExps () {\n    const start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n    const mid = '\\\\d*';\n    const end = (this.scale ?\n      `(${escapeRegExp(this.radix)}\\\\d{0,${this.scale}})?` :\n      '') + '$';\n\n    this._numberRegExp = new RegExp(start + mid + end);\n    this._mapToRadixRegExp = new RegExp(`[${this.mapToRadix.map(escapeRegExp).join('')}]`, 'g');\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n  }\n\n  _removeThousandsSeparators (value: string): string {\n    return value.replace(this._thousandsSeparatorRegExp, '');\n  }\n\n  _insertThousandsSeparators (value: string): string {\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n    const parts = value.split(this.radix);\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n    return parts.join(this.radix);\n  }\n\n  override doPrepareChar (ch: string, flags: AppendFlags={}): [string, ChangeDetails] {\n    const [prepCh, details] = super.doPrepareChar(this._removeThousandsSeparators(\n      this.scale && this.mapToRadix.length && (\n        /*\n          radix should be mapped when\n          1) input is done from keyboard = flags.input && flags.raw\n          2) unmasked value is set = !flags.input && !flags.raw\n          and should not be mapped when\n          1) value is set = flags.input && !flags.raw\n          2) raw value is set = !flags.input && flags.raw\n        */\n        flags.input && flags.raw ||\n        !flags.input && !flags.raw\n      ) ? ch.replace(this._mapToRadixRegExp, this.radix) : ch\n    ), flags);\n    if (ch && !prepCh) details.skip = true;\n\n    if (prepCh && !this.allowPositive && !this.value && prepCh !== '-') details.aggregate(this._appendChar('-'));\n\n    return [prepCh, details];\n  }\n\n  _separatorsCount (to: number, extendOnSeparators: boolean=false): number {\n    let count = 0;\n\n    for (let pos = 0; pos < to; ++pos) {\n      if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n        ++count;\n        if (extendOnSeparators) to += this.thousandsSeparator.length;\n      }\n    }\n\n    return count;\n  }\n\n  _separatorsCountFromSlice (slice: string=this._value): number {\n    return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n  }\n\n  override extractInput (fromPos: number=0, toPos: number=this.displayValue.length, flags?: ExtractFlags): string {\n    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n\n    return this._removeThousandsSeparators(super.extractInput(fromPos, toPos, flags));\n  }\n\n  \n  override _appendCharRaw (ch: string, flags: AppendFlags={}): ChangeDetails {\n    if (!this.thousandsSeparator) return super._appendCharRaw(ch, flags);\n\n    const prevBeforeTailValue = flags.tail && flags._beforeTailState ?\n      flags._beforeTailState._value :\n      this._value;\n    const prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n    this._value = this._removeThousandsSeparators(this.value);\n\n    const appendDetails = super._appendCharRaw(ch, flags);\n\n    this._value = this._insertThousandsSeparators(this._value);\n    const beforeTailValue = flags.tail && flags._beforeTailState ?\n      flags._beforeTailState._value :\n      this._value;\n    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n\n    appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n    appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n    return appendDetails;\n  }\n\n  _findSeparatorAround (pos: number): number {\n    if (this.thousandsSeparator) {\n      const searchFrom = pos - this.thousandsSeparator.length + 1;\n      const separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n      if (separatorPos <= pos) return separatorPos;\n    }\n\n    return -1;\n  }\n\n  _adjustRangeWithSeparators (from: number, to: number): [number, number] {\n    const separatorAroundFromPos = this._findSeparatorAround(from);\n    if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n\n    const separatorAroundToPos = this._findSeparatorAround(to);\n    if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n    return [from, to];\n  }\n\n  \n  override remove (fromPos: number=0, toPos: number=this.displayValue.length): ChangeDetails {\n    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n\n    const valueBeforePos = this.value.slice(0, fromPos);\n    const valueAfterPos = this.value.slice(toPos);\n\n    const prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n    this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n\n    return new ChangeDetails({\n      tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length,\n    });\n  }\n\n  override nearestInputPos (cursorPos: number, direction?: Direction): number {\n    if (!this.thousandsSeparator) return cursorPos;\n\n    switch (direction) {\n      case DIRECTION.NONE:\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT: {\n        const separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n        if (separatorAtLeftPos >= 0) {\n          const separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n          if (cursorPos < separatorAtLeftEndPos ||\n            this.value.length <= separatorAtLeftEndPos ||\n            direction === DIRECTION.FORCE_LEFT\n          ) {\n            return separatorAtLeftPos;\n          }\n        }\n        break;\n      }\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT: {\n        const separatorAtRightPos = this._findSeparatorAround(cursorPos);\n        if (separatorAtRightPos >= 0) {\n          return separatorAtRightPos + this.thousandsSeparator.length;\n        }\n      }\n    }\n\n    return cursorPos;\n  }\n\n  override doValidate (flags: AppendFlags): boolean {\n    // validate as string\n    let valid = Boolean(this._removeThousandsSeparators(this.value).match(this._numberRegExp));\n\n    if (valid) {\n      // validate as number\n      const number = this.number;\n      valid = valid && !isNaN(number) &&\n        // check min bound for negative values\n        (this.min == null || this.min >= 0 || this.min <= this.number) &&\n        // check max bound for positive values\n        (this.max == null || this.max <= 0 || this.number <= this.max);\n    }\n\n    return valid && super.doValidate(flags);\n  }\n\n  override doCommit () {\n    if (this.value) {\n      const number = this.number;\n      let validnum = number;\n\n      // check bounds\n      if (this.min != null) validnum = Math.max(validnum, this.min);\n      if (this.max != null) validnum = Math.min(validnum, this.max);\n\n      if (validnum !== number) this.unmaskedValue = this.format(validnum, this);\n\n      let formatted = this.value;\n\n      if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n      if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n\n      this._value = formatted;\n    }\n\n    super.doCommit();\n  }\n\n  _normalizeZeros (value: string): string {\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\n\n    // remove leading zeros\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\n    // add leading zero\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n    if (parts.length > 1) {\n      parts[1] = parts[1].replace(/0*$/, '');  // remove trailing zeros\n      if (!parts[1].length) parts.length = 1;  // remove fractional\n    }\n\n    return this._insertThousandsSeparators(parts.join(this.radix));\n  }\n\n  _padFractionalZeros (value: string): string {\n    if (!value) return value;\n\n    const parts = value.split(this.radix);\n    if (parts.length < 2) parts.push('');\n    parts[1] = parts[1].padEnd(this.scale, '0');\n    return parts.join(this.radix);\n  }\n\n  doSkipInvalid (ch: string, flags: AppendFlags={}, checkTail?: TailDetails): boolean {\n    const dropFractional = this.scale === 0 && ch !== this.thousandsSeparator && (\n      ch === this.radix ||\n      ch === MaskedNumber.UNMASKED_RADIX ||\n      this.mapToRadix.includes(ch)\n    )\n    return super.doSkipInvalid(ch, flags, checkTail) && !dropFractional;\n  }\n\n  override get unmaskedValue (): string {\n    return this._removeThousandsSeparators(\n      this._normalizeZeros(\n        this.value))\n      .replace(this.radix, MaskedNumber.UNMASKED_RADIX);\n  }\n\n  override set unmaskedValue (unmaskedValue: string) {\n    super.unmaskedValue = unmaskedValue;\n  }\n\n  override get typedValue (): number {\n    return this.parse(this.unmaskedValue, this);\n  }\n\n  override set typedValue (n: number) {\n    this.rawInputValue = this.format(n, this).replace(MaskedNumber.UNMASKED_RADIX, this.radix);\n  }\n\n  /** Parsed Number */\n  get number (): number {\n    return this.typedValue;\n  }\n\n  set number (number: number) {\n    this.typedValue = number;\n  }\n\n  /**\n    Is negative allowed\n  */\n  get allowNegative (): boolean {\n    return (this.min != null && this.min < 0) || (this.max != null && this.max < 0);\n  }\n\n  /**\n    Is positive allowed\n  */\n  get allowPositive (): boolean {\n    return (this.min != null && this.min > 0) || (this.max != null && this.max > 0);\n  }\n\n  override typedValueEquals (value: any): boolean {\n    // handle  0 -> '' case (typed = 0 even if value = '')\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n    return (\n      super.typedValueEquals(value) ||\n      MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)\n    ) && !(value === 0 && this.value === '');\n  }\n}\n\n\nIMask.MaskedNumber = MaskedNumber;\n","import createMask, { type FactoryArg, type FactoryReturnMasked } from './factory';\nimport IMask from '../core/holder';\n\n\n/** Mask pipe source and destination types */\nexport\nconst PIPE_TYPE = {\n  MASKED: 'value',\n  UNMASKED: 'unmaskedValue',\n  TYPED: 'typedValue',\n} as const;\n\ntype ValueOf<T> = T[keyof T];\n\ntype TypedValueOf<\n  Opts extends FactoryArg,\n  Type extends ValueOf<typeof PIPE_TYPE>\n> = Type extends (typeof PIPE_TYPE.MASKED | typeof PIPE_TYPE.UNMASKED) ?\n  string :\n  FactoryReturnMasked<Opts>['typedValue']\n;\n\n/** Creates new pipe function depending on mask type, source and destination options */\nexport\nfunction createPipe<\n  Arg extends FactoryArg,\n  From extends ValueOf<typeof PIPE_TYPE> = typeof PIPE_TYPE.MASKED,\n  To extends ValueOf<typeof PIPE_TYPE> = typeof PIPE_TYPE.MASKED,\n> (\n  arg: Arg,\n  from: From=PIPE_TYPE.MASKED as From,\n  to: To=PIPE_TYPE.MASKED as To,\n) {\n  const masked = createMask(arg);\n  return (value: TypedValueOf<Arg, From>) => masked.runIsolated(m => {\n    m[from] = value;\n    return m[to] as TypedValueOf<Arg, To>;\n  });\n}\n\n/** Pipes value through mask depending on mask type, source and destination options */\nexport\nfunction pipe<\n  Arg extends FactoryArg,\n  From extends ValueOf<typeof PIPE_TYPE> = typeof PIPE_TYPE.MASKED,\n  To extends ValueOf<typeof PIPE_TYPE> = typeof PIPE_TYPE.MASKED,\n> (\n  value: TypedValueOf<Arg, From>,\n  mask: Arg,\n  from?: From,\n  to?: To,\n) {\n  return createPipe(mask, from, to)(value);\n}\n\n\nIMask.PIPE_TYPE = PIPE_TYPE;\nIMask.createPipe = createPipe;\nIMask.pipe = pipe;\n","import IMask from './imask';\nexport { default as HTMLContenteditableMaskElement } from './controls/html-contenteditable-mask-element';\nexport { default as HTMLInputMaskElement, type InputElement } from './controls/html-input-mask-element';\nexport { default as HTMLMaskElement } from './controls/html-mask-element';\nexport { default as InputMask, type InputMaskElement } from './controls/input';\nexport { default as MaskElement } from './controls/mask-element';\nexport { default as ChangeDetails, type ChangeDetailsOptions } from './core/change-details';\nexport { type AppendTail, type TailDetails } from './core/tail-details';\nexport { DIRECTION, forceDirection, type Direction, type Selection } from './core/utils';\nexport { default as Masked, type AppendFlags, type ExtractFlags, type MaskedOptions, type MaskedState } from './masked/base';\nexport { default as MaskedDate, type DateMaskType, type MaskedDateOptions } from './masked/date';\nexport { default as MaskedDynamic, type DynamicMaskType, type MaskedDynamicOptions, type MaskedDynamicState } from './masked/dynamic';\nexport { default as MaskedEnum, type MaskedEnumOptions } from './masked/enum';\nexport {\n    default as createMask,\n    normalizeOpts,\n    type AllFactoryStaticOpts,\n    type FactoryArg,\n    type FactoryConstructorOpts,\n    type FactoryConstructorReturnMasked,\n    type FactoryInstanceOpts,\n    type FactoryInstanceReturnMasked,\n    type FactoryOpts,\n    type FactoryReturnMasked,\n    type FactoryStaticOpts,\n    type FactoryStaticReturnMasked,\n    type NormalizedOpts,\n    type UpdateOpts,\n} from './masked/factory';\nexport { default as MaskedFunction, type MaskedFunctionOptions } from './masked/function';\nexport { default as MaskedNumber, type MaskedNumberOptions } from './masked/number';\nexport { default as MaskedPattern, type BlockPosData, type Definitions, type MaskedPatternOptions, type MaskedPatternState } from './masked/pattern';\nexport { type default as PatternBlock } from './masked/pattern/block';\nexport { default as ChunksTailDetails, type ChunksTailState } from './masked/pattern/chunk-tail-details';\nexport { default as PatternFixedDefinition, type PatternFixedDefinitionOptions } from './masked/pattern/fixed-definition';\nexport { default as PatternInputDefinition, type PatternInputDefinitionOptions, type PatternInputDefinitionState } from './masked/pattern/input-definition';\nexport { createPipe, pipe, PIPE_TYPE } from './masked/pipe';\nexport { default as MaskedRange, type MaskedRangeOptions } from './masked/range';\nexport { default as MaskedRegExp, type MaskedRegExpOptions } from './masked/regexp';\n\ntry { (globalThis as any).IMask = IMask; } catch {}\nexport default IMask;\n"],"names":["isString","str","String","isObject","obj","_obj$constructor","constructor","name","pick","keys","Array","isArray","_","k","includes","Object","entries","reduce","acc","_ref","v","DIRECTION","NONE","LEFT","FORCE_LEFT","RIGHT","FORCE_RIGHT","forceDirection","direction","escapeRegExp","replace","objectIncludes","b","a","arrA","arrB","i","length","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","prototype","hasOwnProperty","call","ActionDetails","opts","assign","this","value","slice","startChangePos","oldValue","oldSelection","start","Math","min","cursorPos","insertedCount","inserted","substr","removedCount","max","end","removed","head","substring","tail","removeDirection","IMask","el","InputMask","maskedClass","mask","Error","MaskedRegExp","MaskedPattern","MaskedDate","Number","MaskedNumber","MaskedDynamic","Masked","Function","MaskedFunction","console","warn","normalizeOpts","instanceOpts","_mask","startsWith","createMask","nOpts","MaskedClass","MaskElement","selectionStart","_unsafeSelectionStart","selectionEnd","_unsafeSelectionEnd","select","_unsafeSelect","isActive","HTMLMaskElement","input","super","_handlers","rootElement","_this$input$getRootNo","_this$input$getRootNo2","_this$input","getRootNode","document","activeElement","bindEvents","handlers","forEach","event","_toggleEventHandler","EVENTS_MAP","unbindEvents","handler","removeEventListener","addEventListener","selectionChange","drop","click","focus","commit","HTMLInputMaskElement","setSelectionRange","HTMLContenteditableMaskElement","root","selection","getSelection","anchorOffset","focusOffset","createRange","range","setStart","firstChild","setEnd","lastChild","removeAllRanges","addRange","textContent","isContentEditable","tagName","masked","_listeners","_value","_unmaskedValue","_saveSelection","bind","_onInput","_onChange","_onDrop","_onFocus","_onClick","alignCursor","alignCursorFriendly","_bindEvents","updateValue","maskEquals","_this$masked","updateOptions","unmaskedValue","updateControl","typedValue","val","typedValueEquals","displayValue","_unbindEvents","_fireEvent","ev","e","listeners","l","_cursorChanging","_changingCursorPos","pos","_selection","newUnmaskedValue","newValue","newDisplayValue","isChanged","_fireChangeEvents","restOpts","updateMask","updateOpts","updateCursor","_delayUpdateCursor","_abortUpdateCursor","setTimeout","_inputEvent","isComplete","clearTimeout","nearestInputPos","on","push","off","hIndex","indexOf","splice","details","oldRawValue","rawInputValue","offset","raw","doCommit","preventDefault","stopPropagation","destroy","ChangeDetails","static","prep","rawInserted","skip","tailShift","aggregate","ContinuousTailDetails","from","stop","extend","appendTo","append","_appendPlaceholder","state","unshift","beforePos","shiftChar","shift","_update","DEFAULTS","_initialized","withValueRefresh","_rawInputValue","reset","resolve","flags","parse","format","extractInput","isFilled","totalInputPositions","fromPos","toPos","extractTail","appendTail","_appendCharRaw","ch","_appendChar","checkTail","consistentState","doPrepareChar","consistentTail","appended","doValidate","beforeTailState","overwrite","tailDetails","_appendEager","_beforeTailState","doPrepare","ci","d","doSkipInvalid","eager","remove","fn","_refreshing","rawInput","ret","runIsolated","_isolated","Boolean","skipInvalid","normalize","prepare","prepareChar","validate","parent","deleteCount","tailPos","eagerRemove","valLength","tval","EMPTY_VALUES","undefined","ChunksTailDetails","chunks","map","join","tailChunk","lastChunk","extendLast","firstTailChunk","blockIndex","chunk","lastBlockIter","_mapPosToBlock","chunkBlock","index","_stops","phDetails","_blocks","remainChars","c","props","cstate","chunkShiftPos","PatternCursor","_log","ok","block","_blockStartPos","s","pushState","popState","pop","bindBlock","_pushLeft","_this$block","_pushRight","pushLeftBeforeFilled","isFixed","pushLeftBeforeInput","pushLeftBeforeRequired","isOptional","pushRightBeforeFilled","pushRightBeforeInput","pushRightBeforeRequired","PatternFixedDefinition","isUnmasking","_isRawInput","maxPos","appendEager","isResolved","char","PatternInputDefinition","placeholderChar","displayChar","lazy","maskOpts","currentMaskFlags","boundPos","_flags$_beforeTailSta","DEFAULT_DEFINITIONS","search","definitions","_rebuildMask","defs","exposeBlock","_maskedBlocks","pattern","unmaskingBlock","optionalBlock","blocks","p","bNames","filter","bName","sort","expose","blockOpts","maskedBlock","isInput","STOP_CHAR","ESCAPE_CHAR","def","maskedState","bi","every","_this$_mapPosToBlock","startBlockIndex","blockIter","blockDetails","chunkTail","_forEachBlocksInRange","bFromPos","bToPos","blockChunk","_findStopBefore","stopBefore","si","toBlockIndex","startBlockIter","endBlockIndex","_blocks2","bDetails","accVal","blockStartPos","fromBlockIter","toBlockIter","isSameBlock","fromBlockStartPos","fromBlockEndPos","removeDetails","cursor","total","maskedBlocks","indices","gi","InputDefinition","FixedDefinition","MaskedRange","_matchFrom","maxLength","to","autofix","patternOpts","fromStr","padStart","toStr","sameCharsCount","repeat","boundaries","minstr","maxstr","placeholder","num","match","padEnd","nextVal","patternBlocks","GET_DEFAULT_BLOCKS","Y","getFullYear","m","getMonth","getDate","bk","date","isDateExist","day","month","year","split","currentMask","exposeMask","compiledMasks","_overwrite","_eager","_skipInvalid","_applyDispatch","prevValueBeforeTail","inputValue","insertValue","tailValue","prevMask","prevMaskState","doDispatch","_flags$_beforeTailSta2","currentMaskRef","dispatch","currentDetails","_this$currentMask","_this$currentMask2","_this$currentMask3","_this$currentMask4","mi","oldMask","_this$currentMask5","inputs","isCurrent","startInputPos","weight","i1","i2","MaskedEnum","enum","_enum","eopts","lengths","requiredLength","optionalLength","some","_updateRegExps","allowNegative","scale","radix","_numberRegExp","_mapToRadixRegExp","mapToRadix","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","_insertThousandsSeparators","parts","prepCh","allowPositive","_separatorsCount","extendOnSeparators","count","_separatorsCountFromSlice","_adjustRangeWithSeparators","prevBeforeTailValue","prevBeforeTailSeparatorsCount","appendDetails","beforeTailValue","beforeTailSeparatorsCount","_findSeparatorAround","searchFrom","separatorPos","separatorAroundFromPos","separatorAroundToPos","valueBeforePos","valueAfterPos","separatorAtLeftPos","separatorAtLeftEndPos","separatorAtRightPos","valid","number","isNaN","validnum","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","sign","zeros","test","dropFractional","UNMASKED_RADIX","n","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","toLocaleString","useGrouping","maximumFractionDigits","PIPE_TYPE","MASKED","UNMASKED","TYPED","createPipe","arg","pipe","globalThis"],"mappings":"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"}